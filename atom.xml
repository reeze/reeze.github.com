<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Zen Space | 寻找善美]]></title>
  <link href="http://reeze.cn/atom.xml" rel="self"/>
  <link href="http://reeze.cn/"/>
  <updated>2012-08-16T20:41:17+08:00</updated>
  <id>http://reeze.cn/</id>
  <author>
    <name><![CDATA[reeze]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[怎么样获取PHP函数默认参数的常量名]]></title>
    <link href="http://reeze.cn/2012/07/22/how-to-get-php-functions-const-parameters-name/"/>
    <updated>2012-07-22T20:40:00+08:00</updated>
    <id>http://reeze.cn/2012/07/22/how-to-get-php-functions-const-parameters-name</id>
    <content type="html"><![CDATA[<p>好久没有更新了，发篇占位文：如果某个函数的默认参数是个常量，那么怎么样获取这个参数的常量名称？见代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">new_blog</span><span class="p">(</span><span class="nv">$title</span> <span class="o">=</span> <span class="nx">DEFAULT_TITLE</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// blahblah</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在上面的代码中，怎么样获取函数new_blog函数的参数$title所对应的默认值常量名： <code>DEFAULT_TITLE</code>。这个问题和以前我曾写过的一篇
关于<a href="http://reeze.cn/2010/12/26/how-to-get-a-php-variables-name-a-custom-php-syntax-implementation/">如何获取变量名称</a>的博文相似。</p>

<p>这个问题，在PHP5.4.6之前基本上没有解决方法了，因为函数定义是编译时的信息，在PHP运行时是获取不到的。
当然这里说的无法实现是指的使用官方PHP版本时没法搞定。</p>

<p>在PHP中类似的需求，一般都可以使用PHP的反射扩展。</p>

<h3>PHP的反射(Reflection)</h3>

<p>反射是PHP5中提供的用于获取或操作PHP内部信息的标准扩展，可能写应用代码的用户使用的较少一些，
编写框架或者平台性的系统会使用到。</p>

<p>比如你的框架需要实现一种插件机制，而你可能需要利用反射来获取类或者函数的元信息。
这里就不对Reflection的使用做过多的介绍了，详细信息见官方文档： <a href="http://cn.php.net/manual/en/book.reflection.php">http://cn.php.net/manual/en/book.reflection.php</a></p>

<h3>新的函数ReflectionParameter::getDefaultValueConstantName()</h3>

<p>不过在PHP5.4.6之前，Reflection是没有实现该功能的。这个需求其实来自PHPUnit的作者<a href="https://github.com/sebastianbergmann">Sebastian Bergmann</a>。
因为这个需求在Reflection模块来说是一个缺失，不属于大功能的升级，所以直接进入了目前的最新分支PHP-5.4。
同时这个功能在PHP-5.4.6中可用了。<a href="https://github.com/php/php-src/blob/PHP-5.4.6/NEWS#L41">https://github.com/php/php-src/blob/PHP-5.4.6/NEWS#L41</a></p>

<p>实现代码见：<a href="https://github.com/php/php-src/commit/13a9555342a4156a6150818234639b49a596ccd6">https://github.com/php/php-src/commit/13a9555342a4156a6150818234639b49a596ccd6</a>,
这个方法目前没有使用说明，不过看名字应该也能明白。不过可以参考<a href="https://github.com/php/php-src/commit/13a9555342a4156a6150818234639b49a596ccd6#diff-1">测试用例</a>。</p>

<p>这个提交给ReflectionParameter类增加了两个函数：</p>

<ol>
<li>ReflectionParameter::isDefaultValueConstant() 用于判断函数的这个参数是否是常量默认参数</li>
<li>ReflectionParameter::getDefaultValueConstantName() 用于获取这个常量默认参数的参数名称</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nb">define</span><span class="p">(</span><span class="s2">&quot;CONST_TEST_1&quot;</span><span class="p">,</span> <span class="s2">&quot;const1&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">ReflectionParameterTest</span><span class="p">(</span><span class="nv">$test1</span><span class="o">=</span><span class="k">array</span><span class="p">(),</span> <span class="nv">$test2</span> <span class="o">=</span> <span class="nx">CONST_TEST_1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">echo</span> <span class="nv">$test</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nv">$reflect</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ReflectionFunction</span><span class="p">(</span><span class="s1">&#39;ReflectionParameterTest&#39;</span><span class="p">);</span>
</span><span class='line'><span class="k">foreach</span><span class="p">(</span><span class="nv">$reflect</span><span class="o">-&gt;</span><span class="na">getParameters</span><span class="p">()</span> <span class="k">as</span> <span class="nv">$param</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nv">$param</span><span class="o">-&gt;</span><span class="na">getName</span><span class="p">()</span> <span class="o">==</span> <span class="s1">&#39;test1&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nb">var_dump</span><span class="p">(</span><span class="nv">$param</span><span class="o">-&gt;</span><span class="na">isDefaultValueConstant</span><span class="p">());</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nv">$param</span><span class="o">-&gt;</span><span class="na">getName</span><span class="p">()</span> <span class="o">==</span> <span class="s1">&#39;test2&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nb">var_dump</span><span class="p">(</span><span class="nv">$param</span><span class="o">-&gt;</span><span class="na">isDefaultValueConstant</span><span class="p">());</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nv">$param</span><span class="o">-&gt;</span><span class="na">isDefaultValueAvailable</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="nv">$param</span><span class="o">-&gt;</span><span class="na">isDefaultValueConstant</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>      <span class="nb">var_dump</span><span class="p">(</span><span class="nv">$param</span><span class="o">-&gt;</span><span class="na">getDefaultValueConstantName</span><span class="p">());</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Foo2</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">const</span> <span class="no">bar</span> <span class="o">=</span> <span class="s1">&#39;Foo2::bar&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Foo</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">const</span> <span class="no">bar</span> <span class="o">=</span> <span class="s1">&#39;Foo::bar&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">baz</span><span class="p">(</span><span class="nv">$param1</span> <span class="o">=</span> <span class="nx">self</span><span class="o">::</span><span class="na">bar</span><span class="p">,</span> <span class="nv">$param2</span><span class="o">=</span><span class="nx">Foo2</span><span class="o">::</span><span class="na">bar</span><span class="p">,</span> <span class="nv">$param3</span><span class="o">=</span><span class="nx">CONST_TEST_1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$method</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ReflectionMethod</span><span class="p">(</span><span class="s1">&#39;Foo&#39;</span><span class="p">,</span> <span class="s1">&#39;baz&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$params</span> <span class="o">=</span> <span class="nv">$method</span><span class="o">-&gt;</span><span class="na">getParameters</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">foreach</span> <span class="p">(</span><span class="nv">$params</span> <span class="k">as</span> <span class="nv">$param</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$param</span><span class="o">-&gt;</span><span class="na">isDefaultValueConstant</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">var_dump</span><span class="p">(</span><span class="nv">$param</span><span class="o">-&gt;</span><span class="na">getDefaultValueConstantName</span><span class="p">());</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">// 运行结果</span>
</span><span class='line'><span class="x">bool(false)</span>
</span><span class='line'><span class="x">bool(true)</span>
</span><span class='line'><span class="x">string(12) &quot;CONST_TEST_1&quot;</span>
</span><span class='line'><span class="x">string(9) &quot;self::bar&quot;</span>
</span><span class='line'><span class="x">string(9) &quot;Foo2::bar&quot;</span>
</span><span class='line'><span class="x">string(12) &quot;CONST_TEST_1&quot;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初试Travis-CI]]></title>
    <link href="http://reeze.cn/2012/07/15/introduction-to-travis-ci/"/>
    <updated>2012-07-15T20:26:00+08:00</updated>
    <id>http://reeze.cn/2012/07/15/introduction-to-travis-ci</id>
    <content type="html"><![CDATA[<p>Travis CI是一个基于云的<a href="http://en.wikipedia.org/wiki/Continuous_integration">持续集成</a>项目，
目前已经支持大部分主流语言了，比如：C，PHP，Ruby，Python, Nodejs等等。和<a href="http://jenkins-ci.org/">Jenkins</a>类似，
Travis CI也是开源的，不过Travis和Github集成非常紧密，官方的集成测试托管只支持Github项目，
不过你也可以搭建一套自己的方案。 这里有一篇比较详实的<a href="http://www.juvenxu.com/2012/03/06/travis-ci/">对Travis-CI的介绍</a>，
同时InfoQ上也有一篇<a href="http://www.juvenxu.com/2012/03/06/travis-ci/">关于Travic_CI的报道</a>，</p>

<p>如果你有开源项目，那么Travis绝对值得一试，目前托管在Github上的大部分知名项目都使用了Travis来做集成测试。
比如Ruby语言的：Rails, Rack, Sinatra, RSpec, Cumber, Node.js, PHP的：Symfony2, Doctrine2, Zend Framework 2。</p>

<p>PHP语言也<a href="https://github.com/php/php-src">使用了Travis做集成测试</a>，不过目前由于PHP的扩展众多，
很多的测试用例本身也不够健壮，PHP的测试经常会失败。</p>

<p>使用Travis-CI的项目可以在说明文件中增加目前版本的构建状态。Travis为每个项目提供一个图片地址，比如PHP的：
https://secure.travis-ci.org/php/php-src.png?branch=master,
<img src="https://secure.travis-ci.org/php/php-src.png?branch=master" alt="php-src" />，之所以是构建失败，是因为前面提到的原因。</p>

<p>如果构建成功，图片将显示：<img src="https://secure.travis-ci.org/reeze/php-leveldb.png?branch=master" alt="php-leveldb" />，
这是我最近在写的一个扩展：<a href="https://github.com/reeze/php-leveldb">php-leveldb</a>的构建状态<a href="http://travis-ci.org/reeze/php-leveldb">http://travis-ci.org/reeze/php-leveldb</a></p>

<p>下面简单介绍一下，如果你在编写一个PHP扩展，该怎么样使用Travis-CI来做持续集成。
当然，你的代码需要在Github上进行托管。</p>

<h2>Travis-CI配置文件</h2>

<p>要使用Travis，首先需要在你的代码根目录下包含一个叫做.travis.yml的文件，这是一个配置文件，
为<a href="http://www.yaml.org">yaml格式</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">language</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">php</span>
</span><span class='line'><span class="l-Scalar-Plain">php</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">5.2</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">5.3</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">5.4</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">env</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">REPORT_EXIT_STATUS=1 NO_INTERACTION=1</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">before_script</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">sh travis/prepare.sh</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">script</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">sh travis/run-test.sh</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">notifications</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">email</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">reeze.xia@gmail.com</span>
</span></code></pre></td></tr></table></div></figure>


<p>配置简单明了，选择需要的语言，同时可以设置需要测试的语言版本，因为php-leveldb支持5.2 ~ 5.4,
所以这里设置了3个需要测试的版本。</p>

<p>env 设置为执行测试时需要设置的环境变量，因为php 执行<code>make test</code>测试时如果测试失败会提示
用户是否将测试结果发送给PHP官方。因为测试是自动进行的，如果不设置NO_INTERACTION=1会导致
测试失败后一直等待用户输入而hang住直到测试超时。</p>

<p>before_script 可以用来进行一些准备工作，例如php-leveldb扩展需要先安装leveldb才能编译。</p>

<p>travis/prepare.sh文件做的工作也就是从leveldb官方下载代码并编译，
最后编译扩展。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'>
</span><span class='line'>wget http://leveldb.googlecode.com/files/leveldb-1.5.0.tar.gz
</span><span class='line'>tar zxvf leveldb-1.5.0.tar.gz
</span><span class='line'><span class="nb">cd </span>leveldb-1.5.0 <span class="o">&amp;&amp;</span> make
</span><span class='line'><span class="nb">cd</span> ..
</span><span class='line'>phpize <span class="o">&amp;&amp;</span> ./configure --with-leveldb<span class="o">=</span><span class="nv">$PWD</span>/leveldb-1.5.0 <span class="o">&amp;&amp;</span> make
</span></code></pre></td></tr></table></div></figure>


<p>travis可以执行任何脚本。因为travis在执行测试之前会建立一个虚拟机用于测试。</p>

<p>script属性就是测试的入口，可以是任何的sh命令。测试结果到底是成功还是失败会依据这个命令的
返回值，如果返回非0结果，则表示测试失败，失败的时候就会给下面notifications设置的邮箱发送邮件。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'>
</span><span class='line'>make <span class="nb">test</span>
</span><span class='line'>
</span><span class='line'><span class="c"># make test didn&#39;t return status code correctly</span>
</span><span class='line'><span class="c"># use this to find whether the make test failed</span>
</span><span class='line'>cat tests/<span class="se">\*</span>.diff
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="nv">$?</span> -eq 0 <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">  </span><span class="nb">exit </span>1;
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>从上面的注释里也提到，因为PHP生成的<a href="https://bugs.php.net/bug.php?id=60285">测试不能正常的返回错误码</a>，这样的结果是即使测试失败了，
travis也会忽略，所以采用了一个折中的方式来测试。因为测试失败会生产diff文件，
报告测试失败的具体原因，cat的好处是能把错误详细信息报告出来，也能方便调试。</p>

<p>每次提交代码到Github上时，Travis将自动对新提交的版本进行测试。</p>

<p>除了PHP，其实你可以在Travis上测试绝大部分的软件，因为travis提供的是一个完整的环境，
而你可以编写任何的脚本来进行你的测试工作。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP中的NOP及为什么有这个opcode]]></title>
    <link href="http://reeze.cn/2012/05/28/what-opcode-zend-nop-is-in-php/"/>
    <updated>2012-05-28T14:19:00+08:00</updated>
    <id>http://reeze.cn/2012/05/28/what-opcode-zend-nop-is-in-php</id>
    <content type="html"><![CDATA[<h2>什么是NOP</h2>

<p>NOP 是一个特殊的opcode，表示空操作，在很多地方存在，汇编中的NOP含义也一样，
机器指令中的空操作通常用来将内存地址进行对齐，以提高CPU访问内存的效率，
GCC等编译器也会将特定的语句进行优化而产生空操作。</p>

<h2>PHP中的空操作opcode NOP: ZEND_NOP</h2>

<p>PHP基于Zend虚拟机，其他基于虚拟机的语言中大都会有类似NOP的指令，
PHP文档有对此的<a href="http://cn.php.net/manual/en/internals2.opcodes.nop.php">简单说明</a>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * no operation</span>
</span><span class='line'><span class="cm"> * opcode number: 0</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">function</span> <span class="nf">A</span><span class="p">(){};</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">/* VLD 的输出结果 */</span>
</span><span class='line'><span class="x">line  #   op  fetch   ext return  operands</span>
</span><span class='line'><span class="x">6 0   NOP              </span>
</span><span class='line'><span class="x">7 1   RETURN              1</span>
</span><span class='line'><span class="x">Function name: A</span>
</span><span class='line'>
</span><span class='line'><span class="x">Compiled variables: none</span>
</span><span class='line'>
</span><span class='line'><span class="x">line  #   op  fetch   ext return  operands</span>
</span><span class='line'><span class="x">6 0   RETURN              null</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的VLD结果可以看出，函数A()的声明编译后变成了<code>NOP</code>操作。</p>

<p>Zend虚拟机是高级抽象，不要考虑内存对齐等的问题，为什么还需要空操作这样的opcode呢？</p>

<p>原因简单讲就是：编译过程优化的结果。有的内容由于可以在编译时就可确定，那么一部分opcode可以
在编译时替换成空操作。</p>

<p>我们来看看这段代码的编译结果：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="k">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Foo</span> <span class="p">{}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">new</span> <span class="nx">Bar</span><span class="p">();</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Bar</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">filename</span><span class="o">:</span>       <span class="o">/</span><span class="nx">Users</span><span class="o">/</span><span class="nx">reeze</span><span class="o">/</span><span class="nx">Opensource</span><span class="o">/</span><span class="nx">php</span><span class="o">-</span><span class="nx">test</span><span class="o">/</span><span class="nx">php</span><span class="o">-</span><span class="nx">src</span><span class="o">-</span><span class="mf">5.4</span><span class="o">/</span><span class="nx">test</span><span class="o">.</span><span class="nx">php</span>
</span><span class='line'><span class="k">function</span> <span class="nf">name</span><span class="o">:</span>  <span class="p">(</span><span class="k">null</span><span class="p">)</span>
</span><span class='line'><span class="nx">number</span> <span class="nx">of</span> <span class="nx">ops</span><span class="o">:</span>  <span class="mi">8</span>
</span><span class='line'><span class="nx">compiled</span> <span class="nx">vars</span><span class="o">:</span>  <span class="nx">none</span>
</span><span class='line'><span class="nx">line</span>     <span class="c1"># *  op                           fetch          ext  return  operands</span>
</span><span class='line'><span class="o">---------------------------------------------------------------------------------</span>
</span><span class='line'>   <span class="mi">2</span>     <span class="mi">0</span>  <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="nx">JMPZ</span>                                                     <span class="k">true</span><span class="p">,</span> <span class="o">-&gt;</span><span class="mi">3</span>
</span><span class='line'>   <span class="mi">3</span>     <span class="mi">1</span>  <span class="o">&gt;</span>   <span class="nx">ZEND_DECLARE_CLASS</span>                               <span class="err">$</span><span class="mi">0</span>      <span class="s1">&#39;%00foo%2FUsers%2Freeze%2FOpensource%2Fphp-test%2Fphp-src-5.4%2Ftest.php0x106cd601f&#39;</span><span class="p">,</span> <span class="s1">&#39;foo&#39;</span>
</span><span class='line'>   <span class="mi">4</span>     <span class="mi">2</span>    <span class="o">&gt;</span> <span class="nx">JMP</span>                                                      <span class="o">-&gt;</span><span class="mi">3</span>
</span><span class='line'>   <span class="mi">6</span>     <span class="mi">3</span>  <span class="o">&gt;</span>   <span class="nx">ZEND_FETCH_CLASS</span>                              <span class="mi">4</span>  <span class="o">:</span><span class="mi">1</span>      <span class="s1">&#39;Bar&#39;</span>
</span><span class='line'>       <span class="mi">4</span>      <span class="k">NEW</span>                                                      <span class="o">:</span><span class="mi">1</span>
</span><span class='line'>       <span class="mi">5</span>      <span class="nx">DO_FCALL_BY_NAME</span>                              <span class="mi">0</span>
</span><span class='line'>   <span class="mi">7</span>     <span class="mi">6</span>      <span class="nx">NOP</span>
</span><span class='line'>   <span class="mi">9</span>     <span class="mi">7</span>    <span class="o">&gt;</span> <span class="k">RETURN</span>
</span></code></pre></td></tr></table></div></figure>


<p>和前面官方函数定义代码一样，上面VLD输出的第7行看到类Bar的opcode变成了NOP，不过请留意第3行，
这一行类Foo定义的opcode是ZEND_DECLARE_CLASS，也就是类的声明。</p>

<p><em>为什么同样是类的声明，第一个类声明的OPCODE和第二个的不一样呢？</em></p>

<p>上例中的代码，在Bar类声明之前是可以执行的<code>new Bar</code>，但是此时Bar类的声明并没有执行到，
那为什么可以访问到Bar类呢，<em>这是因为Bar类的声明在编译时就已经完成了</em>，
因为Bar类已经在编译时声明好了，所以在真正执行的时候就不需要再次执行声明类的操作了，
所以它所对应的opcode被替换成NOP了。</p>

<p>而Foo这个类由于处在条件判断块之中，编译期无法确定Foo类是否一定会被执行，所以还是需要在
执行时来声明这个类，所以opcode没有改变。</p>

<p>对于使用了opcode缓存的代码来说，把函数和类的声明移到了编译时，也就减少了执行时的opcode执行，
这能加快代码的执行。</p>

<h2>优化</h2>

<p>你可能会想，既然类及函数的声明可以优化掉，为什么不能直接丢弃这个opcode呢？
一能减少opcode占用的内容，比如很多的框架中有大量的类定义，也能减少执行时间，
因为空操作并不是0成本的，执行NOP的时候还是需要消耗CPU的。</p>

<p>先看看opcode编译过程的一个重要函数：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">zend_op</span> <span class="o">*</span><span class="nf">get_next_op</span><span class="p">(</span><span class="n">zend_op_array</span> <span class="o">*</span><span class="n">op_array</span> <span class="n">TSRMLS_DC</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">zend_uint</span> <span class="n">next_op_num</span> <span class="o">=</span> <span class="n">op_array</span><span class="o">-&gt;</span><span class="n">last</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>  <span class="n">zend_op</span> <span class="o">*</span><span class="n">next_op</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">next_op_num</span> <span class="o">&gt;=</span> <span class="n">CG</span><span class="p">(</span><span class="n">context</span><span class="p">).</span><span class="n">opcodes_size</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">op_array</span><span class="o">-&gt;</span><span class="n">fn_flags</span> <span class="o">&amp;</span> <span class="n">ZEND_ACC_INTERACTIVE</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="cm">/* we messed up */</span>
</span><span class='line'>          <span class="n">zend_printf</span><span class="p">(</span><span class="s">&quot;Ran out of opcode space!</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>                      <span class="s">&quot;You should probably consider writing this huge script into a file!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="n">zend_bailout</span><span class="p">();</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">CG</span><span class="p">(</span><span class="n">context</span><span class="p">).</span><span class="n">opcodes_size</span> <span class="o">*=</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'>      <span class="n">op_array_alloc_ops</span><span class="p">(</span><span class="n">op_array</span><span class="p">,</span> <span class="n">CG</span><span class="p">(</span><span class="n">context</span><span class="p">).</span><span class="n">opcodes_size</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">next_op</span> <span class="o">=</span> <span class="o">&amp;</span><span class="p">(</span><span class="n">op_array</span><span class="o">-&gt;</span><span class="n">opcodes</span><span class="p">[</span><span class="n">next_op_num</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">init_op</span><span class="p">(</span><span class="n">next_op</span> <span class="n">TSRMLS_CC</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">next_op</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个函数每次会返回一个zend_op(也就是opcode一个最小单位)，opcode的存储空间申请和哈希表类似，
通过预先申请空间的方式，如果空间不足则适当扩容。在编译时，opcode是以文件为单位的，而通常
在一个文件中函数或类声明的个数是不会太多的。而在编译时opcode数组已经是预先申请好的，所以
及时优化掉这个opcode，而实际在编译时的内存占用也不会有任何的优化。</p>

<p>目前只有少数几处使用了ZEND_NOP这个opcode。读者可以参考Zend/zend_compile.c: zend_do_early_binding()，
这个函数进行就是在确定在编译时能确定的函数以及类声明，在完成函数或类的声明后将当前编译的opcode设置为ZEND_NOP。
因为后续在执行是并需要再次对该函数或类进行声明了。</p>

<p>在这个函数中其实可以将生成的ZEND_NOP优化掉的，比如eAccelarator扩展中就对opcode进行了优化，将ZEND_NOP从
opcode_array数组中移除了，因为使用了opcode cache扩展优化只进行一次，而执行对多次执行，
这样的优化是值得的。目前Zend引擎并没有进行任何的优化，首先从代码上来看，类和函数声明的数量和其他指令的数量
之间差很多个等级，所以至少这个地方优化的收益是有限的，为了保证Zend引擎的简洁它没有进行优化。</p>

<p>目前APC扩展已经基本确定为将要进入PHP默认opcode缓存的官方扩展了，那么这些优化都可以在扩展中进行，
保证Zend引擎的简单易维护更为重要。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[迁移博客到Octopress]]></title>
    <link href="http://reeze.cn/2012/05/19/migrate-to-octopress/"/>
    <updated>2012-05-19T23:50:00+08:00</updated>
    <id>http://reeze.cn/2012/05/19/migrate-to-octopress</id>
    <content type="html"><![CDATA[<p>很久以前就不想继续使用Wordpress了，不太习惯在线写东西，开始返璞归真，比较喜欢
纯文本的内容创作方式，<a href="http://www.php-internal.com">TIPI</a>就使用的是markdown格式，
同时在终端也会让我更有写作的欲望。</p>

<p>翻了一下以前的博客，原来一共加起来也不足20篇。以此作为起点今后多继续更新博客吧。</p>

<p>TIPI的issue里还有很多的待处理工作，计划在7月份全部写完。这个始终是高优先级的。
最近给PHP修复了一些bug，也有一些feature被接受了。在这过程中对PHP的实现又有了一些更加深入
的理解。也有冲动想要写到TIPI里。总之，TIPI会一直更新。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[复制SSH会话,避免多次密码输入]]></title>
    <link href="http://reeze.cn/2011/03/22/duplicate-ssh-session/"/>
    <updated>2011-03-22T18:49:27+08:00</updated>
    <id>http://reeze.cn/2011/03/22/duplicate-ssh-session</id>
    <content type="html"><![CDATA[<p>就当时记事吧. 这不是怎样配置ssh密钥避免密码输入的实例,　当然经常ssh登陆的你肯定也配置过了.</p>

<p>我们公司的内网环境比较特殊,　为了安全性做了各种认证,　联入网络需要准入一下,　准入需要使用密码+随即密码的方式认证,　是挺安全的,　可以对于我们来说其实很痛苦,每次都要输入一下密码,因为包含了随即密码,我们无法使用脚本来方便的准入.　我们联入公司的开发机需要通过一台特殊的服务器来将我们的登陆转发,　也就是登陆到中转机,然后通过中转机在ssh.同样登陆中转机也是需要这个随机密码的.　吐槽完毕.</p>

<p>工作中经常需要在多台服务之间ssh登陆,　screen 是一个不错的选择,　不过有时候还是需要打开另一个窗口再次登陆,　这时我又得再次输入那个随机密码,　如果你使用windows并且使用SecureCRT那你可以不用继续往下看了,SecureCRT可以简单的复制回话, 这个功能很贴心. 如果使用Linux&amp;Mac OS那就继续往下看.</p>

<p>在/etc/ssh_config 文件中加入</p>

<pre><code>Host *
ControlMaster auto
ControlPath ~/.ssh/master-%r@%h:%p
</code></pre>

<p>下次登陆同一站点的时候就会自动复用已有的回话. 可以只输入一次密码开N个窗口了. 这个和密钥要解决的不是同一个问题.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TIPI项目正式发布&恭喜er童鞋大婚]]></title>
    <link href="http://reeze.cn/2011/03/20/tipi-first-release-and-ers-marriage/"/>
    <updated>2011-03-20T23:45:12+08:00</updated>
    <id>http://reeze.cn/2011/03/20/tipi-first-release-and-ers-marriage</id>
    <content type="html"><![CDATA[<p>首先恭喜一下er童鞋的大婚吧.</p>

<p>接着er大婚的喜气,项目决定在今天发布我们的TIPI项目,项目从成立到现在,一直有条不紊的前进. 现在项目也进行的差不多,可以公开给大家了.   项目的第一个tag,其实是在20分钟前才提交完.终于能如期发布.
下面是我们的发布公告.  欢迎围观:)</p>

<hr />

<p>我们的朋友，TIPI团队成员，博客哥，er<a href="http://www.zhangabc.com/">http://www.zhangabc.com</a>同学在今天这个春光灿烂，春暖花开，春心荡漾，春情澎湃的大好日子里，兴高采烈的走入了婚姻的殿堂。 在这样一个让人激动不已，激情四射的日子，TIPI团队决定发布<a href="http://www.php-internal.com/">深入理解PHP内核项目</a>的第一阶段成果。</p>

<p>大概在半年前，我们在网上相聚，莫名的邂逅，有了我们这样的一个团队。我们有激情，有想法，有行动，也有了我们这个项目。 开始的艰难，没有时间的痛苦，坚持，从而有了今天的发布。一路走来，有辛苦，也有收获，至少记录了我们的青春，至少做了我们想做的！</p>

<p><a href="http://www.php-internal.com/">深入理解PHP内核（TIPI）项目</a>是一个开源的，分析PHP内核的系列文章项目。整个项目是基于PHP5.3版本的源码。 它包括PHP语言中我们常用的变量，函数，类，对象等的实现原理，也包括PHP的虚拟机，内存管理机制，线程安全，错误异常，文件流和PHP5.3新增加的垃圾收集机制，命名空间等。 除了PHP语言本身的特性外，还包括PHP扩展的相关信息。我们希望这个项目可以帮助更多的PHPer可以更加了解PHP语言本身，知其然知其所以然！</p>

<p>第一阶段，我们发布了前四章，从环境的搭建，源码的阅读方式到对于PHP源码的整体把握，再到对于变量和函数的详细解说。随着项目的进展，我们本身对于PHP内核的理解也加深了许多。 后续我们将以章为单位发布后续的章节。现在第5章正在撰写&#8230;</p>

<p><a href="http://www.php-internal.com/">在线阅读入口>>></a></p>

<h2>TIPI团队序</h2>

<p>博客哥三者，今聚首于网络一偶，共谋TIPI大计，与诸君共享技术之事： 向来穷PHP内核之事者或多，却鲜有分享之举。哥三者，常流连于中外博客也，若得一佳作，即欣喜若狂，本乐分享，及有学习总结之心，欲为PHP内核之事穷全身之力。</p>

<ul>
<li><p><a href="http://reeze.cn/">reeze</a>，博客哥者，好苹果，好开源, 陶醉于Web开发及架构, 为Ruby之美所折服, 甚爱iOS及其开发, 好一切善美之事物.</p></li>
<li><p><a href="http://www.zhangabc.com/">er</a>，博客哥者，稀饭Linux, Web, 2.0, Ajax, C, PHP, Javascript, CSS等。乃一以代码为乐之码农也。</p></li>
<li><p><a href="http://www.phppan.com/">phppan</a>，博客哥者，好书，好PHP，亲于PHP，C，Ajax，程序架构等</p></li>
</ul>


<p>是以三人之力行分享之事，转GIT，习markdown，论项目之计于深夜，何怕事之不成？务使PHP内核之事向众人知。 为此特示。</p>

<h2>项目大事记</h2>

<ul>
<li><p>2010/12/28 14:47 pan向reeze提议写一个PHP内核系列文章,一拍即合.</p></li>
<li><p>2010/12/28 15:10 er同学加入.组织正式形成.</p></li>
<li><p>2010/12/30 11:11 pan发出&lt;&lt;深入理解PHP内核>>第一份完整目录草稿.</p></li>
<li><p>2010/12/31 21:14 举行第一次三方会谈,结合pan和reeze的目录草稿确定了正式目录. 标志着TIPI团队项目的正式确立.. (鼓掌).</p></li>
<li><p>2011/01/01 05:08 reeze向github版本库提交了完整的项目, TIPI项目开始进入实施阶段</p></li>
<li><p>2011/01/06 15:22 经过哥三激烈的讨论后做出艰难的决定,我们的项目域名正式确定为php-internal.com.(撒花无数).</p></li>
<li><p>2011/02/14 23:32 在这个几人欢喜几人愁，充满花香的日子里, 哥三在深夜确定了TIPI项目的第一次整体发布流程，并且定稿了前三章的大纲以及确定了发布前的调整工作。</p></li>
<li><p>2011/02/25 02:53 虽然我们还没有正式开始推广TIPI, 但已经有人开始关注TIPI了.　恭喜icodeu<a href="http://blog.icodeu.com/">http://blog.icodeu.com</a>同学成为我们第一位留下脚印的同学(看留言时间,也是个夜猫子啊.)</p></li>
<li><p>2011/03/10 11:22 经过TIPI团队的慎重考虑, TIPI团队新增一员大将:honestqiao同学, 欢迎他的加入!</p></li>
<li><p>2011/03/20 20:00 今天是TIPI团队成员er同学的大婚之日，团队决定在这个喜庆的日子将我们第一阶段的成果对外发布。让我们恭喜这对新人和我们的TIPI团队。</p></li>
</ul>


<h2>特别鸣谢</h2>

<p>我们需要感谢我们家里的领导，没有有她们的支持，也就没有我们今天的发布，感谢她们的包容，感谢她们的照顾，感谢她们的理解和支持。谢谢！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[PHP-Internal]定制PHP语法获取PHP变量的变量名]]></title>
    <link href="http://reeze.cn/2010/12/26/how-to-get-a-php-variables-name-a-custom-php-syntax-implementation/"/>
    <updated>2010-12-26T17:56:53+08:00</updated>
    <id>http://reeze.cn/2010/12/26/how-to-get-a-php-variables-name-a-custom-php-syntax-implementation</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Plugin]豆瓣秀 For WordPress]]></title>
    <link href="http://reeze.cn/2010/11/28/doubanshow-for-wordpress/"/>
    <updated>2010-11-28T22:10:23+08:00</updated>
    <id>http://reeze.cn/2010/11/28/doubanshow-for-wordpress</id>
    <content type="html"><![CDATA[<p>我喜欢在博客中显示我在豆瓣上的一些信息，比如想看哪些书哪些电影神马的。刚开始用的是 Robin的 <a href="http://www.robb.com.cn/plugins">http://www.robb.com.cn/plugins/</a> 的 WP-DoubanShow插件，他用的是豆瓣API。这个插件需要手动修改主题模板文件。刚开始用的挺好，修改就修改吧。不过后来换过几次主题后发现每次修改模板文件还挺“脏”的。遂问robin能否修改成widget的方式，他说官方推出了一个豆瓣秀功能<a href="http://www.douban.com/service/badgemaker">http://www.douban.com/service/badgemaker</a>， 所以不继续维护了。看过官方的说明。发现要在Wordpress中用也只能手动修改模板，不过官方提供了一个生成js的设置项，可以根据需要生成相应的脚本，选项也还算简单。 在网上搜了一番，没有给wordpress用的插件，所以自己写了一个，设置项和官方的一样。下面简单的说明一下：</p>

<ol>
<li><p>第一步：下载插件文件： <a href="http://reeze.cn/uploads/2010/11/DoubanShow.zip">DoubanShow.zip</a>, 或者在管理界面中添加插件, 搜索douban即可看到&#8221;豆瓣秀For Wordpress&#8221; 选择安装, 如果这样的话,下面的上传步骤就不需要了</p></li>
<li><p>第二步：上传安装。 后台管理的  插件 -> 添加插件 -> 上传中上传下载的文件。<a href="http://reeze.cn/uploads/2010/11/upload.png"><img src="http://reeze.cn/uploads/2010/11/upload.png" alt="" /></a></p></li>
</ol>


<p><a href="http://reeze.cn/uploads/2010/11/active.png"><img src="http://reeze.cn/uploads/2010/11/active2.png" alt="" /></a>
上传完后记得“启用插件&#8221;</p>

<ol>
<li></li>
</ol>


<p>第三步：在后台管理的 外观 -> 小工具 中选择”豆瓣秀“ 拖到右侧你想放置的位置。 然后点击拖过去的豆瓣秀箭头。出现如下设置：</p>

<p><a href="http://reeze.cn/uploads/2010/11/settings.png"><img src="http://reeze.cn/uploads/2010/11/settings.png" alt="" /></a></p>

<p>标题默认为空，就是不显示标题。也可以设置成你想要的标题。然后要设置好你的豆瓣ID，记住不是豆瓣的登录用户名。 设置好以后。去你的页面看看效果吧，也可以看我博客页面右下角。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP Puzzle(一): 有趣的变量作用域-PHP中global和Javascript中的var关键字]]></title>
    <link href="http://reeze.cn/2010/11/14/php-puzzle-1-the-variables-scope-in-php-and-javascript/"/>
    <updated>2010-11-14T15:38:32+08:00</updated>
    <id>http://reeze.cn/2010/11/14/php-puzzle-1-the-variables-scope-in-php-and-javascript</id>
    <content type="html"><![CDATA[<p>昨天在网上看到几道有意思的PHP题, 下面这道题让我想起了对应的Javascript版本.
`</p>

<p>这段代码运行结果是什么呢? 别急着执行这段代码,先想想你的结果.然后再对比一下吧.</p>

<p>我们看先看看global的定义 http://www.php.net/manual/en/language.variables.scope.php 这里也没有太为规范的解释.只是说可以通过global关键字来访问全局变量. 这里还涉及到一个类型转换的问题.</p>

<p>大家都知道PHP脚本是编译为opcode逐语句执行的. 那么现在要一句语句解释就很容易了.
`</p>

<p>这里可能比较困惑的的是现在变量$a到底是局部变量还是全局变量了.因为global在定义局部变量之后.所以$a变为了全局变量,而在最后输出结果的时候$a并没有值.所以最后在相乘的时候是 NULL * 100; 也就是0了;可能会有人有疑问, 后面只是把$a变为了全局变量, 他的值应该不变的啊. 让我通过下面的例子来看把:
`</p>

<p>  int(0)
  [&#8220;a&#8221;]=>
  &NULL;
}
<code>
变量a是NULL的一个引用,因为全局作用域内没有a这个变量. 所以即使在函数前面定义了一个a变量,但是它的值已经指向了全局作用域了.
实际上 global关键字首先从全局符号表中查找变量名叫做a的变量,并把这个变量值设置为当前作用域的符号表中的a变量(更新了当前变量的值). 如果全局作用域内没有这个变量则会在全局作用域内增加这个变量, 实现代码见: $PHP_SRC/Zend/zend_vm_execute.h
</code>
static int ZEND_FASTCALL zend_fetch_var_address_helper_SPEC_CONST(int type, ZEND_OPCODE_HANDLER_ARGS) {</p>

<pre><code>    // ...
    if (zend_hash_find(target_symbol_table, varname-&gt;value.str.val, varname-&gt;value.str.len+1, (void **) &amp;retval;) == FAILURE) {
        switch (type) {
            case BP_VAR_R:
            case BP_VAR_UNSET:
                zend_error(E_NOTICE,"Undefined variable: %s", Z_STRVAL_P(varname));
                /* break missing intentionally */
            case BP_VAR_IS:
                retval = &amp;EG;(uninitialized_zval_ptr);
                break;
            case BP_VAR_RW:
                zend_error(E_NOTICE,"Undefined variable: %s", Z_STRVAL_P(varname));
                /* break missing intentionally */
            case BP_VAR_W: {
                    zval *new_zval = &amp;EG;(uninitialized_zval);

                    Z_ADDREF_P(new_zval);
                    zend_hash_update(target_symbol_table, varname-&gt;value.str.val, varname-&gt;value.str.len+1, &amp;new;_zval, sizeof(zval *), (void **) &amp;retval;);
                }
                break;
            EMPTY_SWITCH_DEFAULT_CASE()
        }
    }

 //...
</code></pre>

<p>}
<code>
看了这个解释大家可能觉得理所当然.一句一句执行的嘛. 看完了PHP中全局作用域的例子,咱们再看看类似的Javascript中的局部变量的版本吧
</code>
var a = 1;
function multiply(b)
{</p>

<pre><code> a = 100;
 var a;

 return a * b;
</code></pre>

<p>}
alert(a);
alert(multiply(100));
`
那这段代码的输出将会是多少呢?
如果还是同样的思路,结果可能是你的期望完全不一样的结果. <strong>这里的var定义变量和php中global不是一样的东西, php中的global是会在运行时执行的.而Javascript中的var在运行之前就已经&#8221;处理&#8221;好了</strong>.在运行之前的&#8221;语法分析&#8221;(没有看过Javascript引擎的实现.姑且这么分把)过程中,multiply函数中出现了var a;则把变量a加到函数体内的&#8221;局部变量表&#8221;中了.在运行过程中并不会执行var a;这一句.  这也是Javascript&#8221;怪异&#8221;的地方.定义变量的位置并没有关系.所以在函数内定义局部变量最好放在函数体的前面.</p>

<p>所以第一个alert输出的1, 函数的执行并没有改版全局范围内的a变量; 第二就没有什么问题了, 是10000;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[怎样获取PHP变量的变量名之PHP实现]]></title>
    <link href="http://reeze.cn/2010/11/04/php-get-variables-name-a-php-impliment/"/>
    <updated>2010-11-04T11:07:37+08:00</updated>
    <id>http://reeze.cn/2010/11/04/php-get-variables-name-a-php-impliment</id>
    <content type="html"><![CDATA[<p><a href="http://reeze.cn/2010/10/30/php-internal-how-to-get-variables-name-an-extension-implement/">上一篇文章</a>里提到是用PHP扩展实现获取变量的变量名的方法. 今天发现有一个PHP实现的版本 . 实现方法来自:http://mach13.com/how-to-get-a-variable-name-as-a-string-in-php</p>

<p><strong>刚开始以为这个方法好使, 仔细想想其实也是有问题的.</strong>
<del>
这个解决方法是用的PHP里的get_defined_vars()方法,该方法返回当前作用域内的所有变量信息.也是和$GLOBALS一样,以变量名 => 值的方式返回.
他的代码很简单:</p>

<p>`
$v)</p>

<pre><code>    $aDefinedVars_0[$k] = $v;

$iVarSave = $iVar;
$iVar     =!$iVar;   // 将当前变量的值取反

$aDiffKeys = array_keys (array_diff_assoc ($aDefinedVars_0, $aDefinedVars));  // 对比取反前后的变量
$iVar      = $iVarSave; // 恢复当前变量的值

return $aDiffKeys[0];
}
</code></pre>

<p>?></p>

<p>`</p>

<p>它通过引用的方式改变当前变量的值, 然后通过对比前后两个数组的差异来获取值被改变了的变量.然后返回其名字.经过测试这的确是一个方法.相对我实现的方法. 它提供的方法移植性较好, 不需要赖以扩展. 而这个php版本的实现, 必须传递一个get_defined_vars()的参数, 我实现的那个扩展,则不需要. 对于类似 var_name($a=10,get_defined_vars()); 的调用,该方法无法正常获得变量名.
</del></p>

<p>这个今天又仔细想了想,下面提供的方法是有问题的.. 他解决问题的方法是通过修改变量的值, 并对比前后所有的变量来找出值发生变化的变量. 而实际上.修改了其中一个变量另一个变量的值也会发生变化: 这就是引用, 如下
`</p>

<p>PS: 如果你真的需要这种方法. 请重新思考一下你的需要真的需要这样的方法么?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Php Internal How To Get Variables Name An Extension Implement]]></title>
    <link href="http://reeze.cn/2010/10/30/php-internal-how-to-get-variables-name-an-extension-implement/"/>
    <updated>2010-10-30T00:00:00+08:00</updated>
    <id>http://reeze.cn/2010/10/30/php-internal-how-to-get-variables-name-an-extension-implement</id>
    <content type="html"><![CDATA[<p>[?25l[J[J[J[J[J[J[?12l[?25h[?1049h[?1h=[1;37r[?12;25h[?12l[?25h[27m[m[H[2J[?25l[37;1H&#8221;2010-10-30-php-internal-how-to-get-variables-name-an-extension-implement.markdown&#8221; 301L, 12377C[1;1H&#8212;
date: &#8216;2010-10-30 00:39:01&#8217;
layout: post
slug: php-internal-how-to-get-variables-name-an-extension-implement
status: publish
title: &#8216;[PHP-Internal]鎬庝箞鏍疯幏鍙朠HP鍙橀噺鐨勫彉閲忓悕涔嬫墿灞曞疄鐜</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解决Mac下终端中使用screen管理回话但看不到滚动条等问题]]></title>
    <link href="http://reeze.cn/2010/07/02/resolve-mac-terminal-lost-scrollbar-in-screen-command/"/>
    <updated>2010-07-02T15:16:33+08:00</updated>
    <id>http://reeze.cn/2010/07/02/resolve-mac-terminal-lost-scrollbar-in-screen-command</id>
    <content type="html"><![CDATA[<p>工作中开发基本都是ssh到远程服务器上vim开发，有时候因为网络原因或者不小心把终端给关了或者网络出现问题以后就痛苦了，因为vim默认会用swp文件保存修改，我又不想关掉这个功能，一不小心真丢数据就划不来了，非法关闭vim之后再次打开就会提示是否恢复文件，自从发现screen这个绝佳的绘画管理工具，就深深的爱上了它，IBM的这篇文章有详细的介绍  “<a href="http://www.ibm.com/developerworks/cn/linux/l-cn-screen/">linux 技巧：使用screen 管理你的远程会话</a>”。在使用过程中发现一些问题，默认快捷键是Ctrl + A, 用惯了命令行的人肯定会用Ctrl +A , Ctrl + E来定位当前输入的命令吧. 在~/.screenrc中修改一下就可以了，下面是我的.screenrc
<code>
vbell_msg "" # 比如在tab自动提示的时候，默认总是会出现一个Wuff,觉得很烦，关掉
escape ``  # instead of Control-a  使用 反引号当快捷键，因为用的相对较少
termcapinfo xterm* ti@:te@  # 这个就是解决mac下看不到滚动条的问题了
</code>
解决方法来源见：<a href="http://stackoverflow.com/questions/1039442/mac-os-x-terminal-apps-buffer-and-screen-command">http://stackoverflow.com/questions/1039442/mac-os-x-terminal-apps-buffer-and-screen-command</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[让你的网站也像Gmail一样支持文件拖放上传-HTML5之File API]]></title>
    <link href="http://reeze.cn/2010/04/25/make-your-site-drop-uploadable-with-html5s-file-api-like-gmail-does/"/>
    <updated>2010-04-25T00:14:29+08:00</updated>
    <id>http://reeze.cn/2010/04/25/make-your-site-drop-uploadable-with-html5s-file-api-like-gmail-does</id>
    <content type="html"><![CDATA[<blockquote><p>如果你比较好奇，可以先从<a href="http://labs.reeze.cn/labs/HTML5/FileAPI/FileAPI_Test.zip">这里下载所有代码</a>，也可以点击这里<a href="http://labs.reeze.cn/labs/HTML5/FileAPI/chrome_drop_upload.html">查看chrome下上传的demo</a>，点这里<a href="http://labs.reeze.cn/labs/HTML5/FileAPI/firefox36_drop_upload.html">查看firefox下的demo</a></p></blockquote>

<p>前不久<a href="http://net.chinabyte.com/395/11221395.shtml">Gmail推出了支持拖拽的附件上传功能</a>，试用了下还真不错，其实很久以前就在想能有直接拖拽附件的功能，多亏有了HTML5，Web应用越来越像客户端的应用了。</p>

<p>在好奇心驱使下，想了解一下Gmail到底是怎么做到的，了解了一下最新的<a href="http://www.w3.org/TR/FileAPI">HTML5 File API草案</a>，这个接口主要提供的就是提供对文件对象的访问，别想歪了，这个接口是无法随意的访问系统里的文件的。他能做的就是访问<input type="file" />标签里所选择的文件，这些文件可以通过用户手动选择，或者是HTML5的拖放接口选中的文件。有兴趣的童鞋可以看看这个规范，还算比较简单。</p>

<p>下面简单看看接口定义几个对象。</p>

<p>FileList、File对象。</p>

<p>在HTML5中的<input type="file"  />标签中增加了mutilple属性，允许进行多文件选择。大家应该都知道一般上传标签中是不允许选择多个文件的。 新增的这个属性就是允许进行多个文件的选择（这个在桌面应用中也很常见）。<input type="file" **multiple="multiple"** id="file" /></p>

<p>下面是在Firebug中的输出
`</p>

<blockquote><blockquote><blockquote><p>var f = document.getElementById(&#8220;file&#8221;)
f.files
FileList0=File length=1 // 选中的文件数量
f.files[0]
FilefileName=es.dll fileSize=271360
`</p></blockquote></blockquote></blockquote>

<p>FileList对象就是用户选择的所有文件的对象表示，如果是通过input标签选择的，就可以通过上面代码所示的方法进行访问，File对象就可以刚才选择的某个文件的信息，如上面的代码所示，主要可以得到所选中的文件名以及文件大小信息。</p>

<p>你可能在想只能得到这些信息到底有什么用呢？都没有办法读取文件内容，这就得提到规范中的FileReader接口了，这个接口就是用来读取File对象文件的。</p>

<p>在<a href="http://www.w3.org/TR/FileAPI">File API规范</a>中提到File API主要是和其他的接口协同合作。比如XMLHttpRequest (这个新接口支持通过xhr的send()方法发送File对象)， DataTransfer(也就是HTML5中的拖拽接口 )， 以及<a href="http://dev.w3.org/html5/workers">Web Worksers</a>(这个主要是异步脚本执行，相当于给JS提供了“多线程”脚本执行能力，并且支持通过postMessage()进行“线程间通信”)，感兴趣的，可以看看<a href="http://www.v-ec.com/dh20156/article.asp?id=242">这篇日志</a>，以及<a href="http://feedproxy.google.com/~r/webbang/~3/_usD4yheDqI">这篇</a>。</p>

<p>目前能实现这样的效果的方式主要有如下几种：</p>

<ul>
<li><p>Gmail中提到的这两个浏览器都支持拖放接口，托放以后可以直接通过托放事件的DataTransfer属性访问到本次托放是关联的文件对象列表FileList,然后通过XMLHttpRequest的send方法将File对象发送到服务器</p></li>
<li><p>在Chrome下支持直接将文件拖放到文件选择控件上，就相当于直接选择了文件。这时可以通过<input type="file" />DOM对象的files属性访问到被托放进来的文件列表对象，然后也可以通过Ajax将文件对象发送到服务器，通过将文件选择控件透明度降低也可以实现Gmail类似的效果。 在Chrome因为可以直接通过托拽的方式让文件选择控件“赋值”，此时也可以通过一个iframe加表单的方式将数据发送到服务器。</p></li>
<li><p>在Firefox3.6下可以通过FileReader直接读取到文件的内容，然后直接将文件内容发送到服务器端(可以参考<a href="http://labs.reeze.cn/labs/HTML5/FileAPI/index.html">这个例子</a>，这是个不完整的例子，直接浏览是看不到效果的，查看源代码你就会懂的。）</p></li>
</ul>


<p>下面就来看看Gmail到底是怎么做到的吧。</p>

<p>本来想通过Firebug的概况功能来捕捉到在托拽期间的脚本执行情况，比如：</p>

<p><a href="http://reeze.cn/uploads/2010/04/screenshot1.png"><img src="http://reeze.cn/uploads/2010/04/screenshot1.png" alt="" /></a><a href="http://reeze.cn/uploads/2010/04/screenshot.png">
</a></p>

<p>但是脚本执行里压根没有找到ajax相关的函数调用，可能是因为firebug还不支持监控页面里嵌入的iframe中的脚本执行跟踪，这也说明本次上传肯定是在某个iframe中完成的。，那就直接监听网络吧，托拽上传一个附件时查看网络情况，发现附件是通过下面的ajax post过去的：</p>

<p><a href="http://reeze.cn/uploads/2010/04/Compose-Mail-reeze.xia@gmail.com-Gmail1.jpg"><img src="http://reeze.cn/uploads/2010/04/Compose-Mail-reeze.xia@gmail.com-Gmail1.jpg" alt="" /></a></p>

<p>大家注意看，是通过ajax post方式将附件POST到服务器的，</p>

<p><a href="http://reeze.cn/uploads/2010/04/Gmail-11.jpg"><img src="http://reeze.cn/uploads/2010/04/Gmail-11.jpg" alt="" /></a></p>

<p><a href="http://reeze.cn/uploads/2010/04/Compose-Mail-reeze.xia@gmail.com-Gmail-31.jpg"><img src="http://reeze.cn/uploads/2010/04/Compose-Mail-reeze.xia@gmail.com-Gmail-31.jpg" alt="" /></a><a href="http://reeze.cn/uploads/2010/04/Compose-Mail-reeze.xia@gmail.com-Gmail-3.jpg">
</a></p>

<p>可以看出Gmail在firefox下不是通过表单直接提交实现的。在chrome下的开发人员工具有点简单，无法看到网络情况，我也懒的再去抓包看了，估计是使用透明<input type="file" />+ajax方式实现的。</p>

<p>在Gmail支持托拽的声明中提到目前只支持Chrome 2+以及FireFox3.6+。虽然这两个浏览器都支持HTML5，但是对于所有规范的支持程度都是不一样的，并且规范也还不是正式规范。在Firefox3.6的release note中提到：</p>

<p>Support for new DOM and HTML5 specifications including the Drag &amp; Drop API and the File API, which allow for more interactive web pages.</p>

<p>开始支持了HTML5的拖拽接口以及File API。</p>

<hr />

<p>下面根据浏览器以及HTML5的规范整理出两个浏览器下实现类似Gmail 上传附件的代码。</p>

<p><a href="http://reeze.cn/uploads/2010/04/14.jpg"><img src="http://reeze.cn/uploads/2010/04/14.jpg" alt="" /></a></p>

<p>点击<a href="http://labs.reeze.cn/labs/HTML5/FileAPI/FileAPI_Test.zip">这里下载所有代码</a>，有兴趣的童鞋查看源代码就知道怎么回事了，有一定的注释：）</p>

<p>也可以点击这里<a href="http://labs.reeze.cn/labs/HTML5/FileAPI/chrome_drop_upload.html">查看chrome下上传的demo</a>，点这里<a href="http://labs.reeze.cn/labs/HTML5/FileAPI/firefox36_drop_upload.html">查看firefox下的demo</a>，之所以分开是为了简单起见，当然你真的想要给你的网站提供托拽上传功能，你就得自己去同时兼容这两个浏览器啦，相信这也不是件困难的事情：）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开启Mac OS X Snow Leopard的NTFS原生读写]]></title>
    <link href="http://reeze.cn/2010/01/24/guide-enable-native-ntfs-readwrite-in-snow-leopard/"/>
    <updated>2010-01-24T18:19:31+08:00</updated>
    <id>http://reeze.cn/2010/01/24/guide-enable-native-ntfs-readwrite-in-snow-leopard</id>
    <content type="html"><![CDATA[<p>在Mac OS X下一直使用MacFUSE和NTFS-3G来访问ntfs分区，这次装了Snow leopard 10.6.2之后出现fusefs.kext can&#8217;t load的错误，从官方得知目前macfuse在snow leopard下有问题，在网上看到<a href="http://forums.macrumors.com/showthread.php?t=785376">这篇贴子</a>提到Snow Leopard其实原生就支持NTFS分区的读写，真是个好消息。</p>

<p>开启的方法有两种：
一种是在/etc/fstab文件里增加挂载选项，基本步骤是：
1，卸载NTFS-3G或者其他读写ntfs分区的软件
2，打开终端$ diskutil info /Volumes/分区名 或者使用磁盘工具获得分区的UUID
3，编辑/etc/fstab文件，增加一行 UUID=分区的UUID none ntfs rw
4，如果还有其他的分区要挂载，则继续上面的步骤2－3增加其他分区</p>

<p>这种方式比较烦琐，第二种方法就比较简单。
大家应该都注意过系统已启动就会自动挂载所有的ntfs分区，这个命令在/sbin/mount_ntfs
这个方法所要做的就是给这个默认的挂载命令增加可读写参数，按如下步骤在终端命令行操作：
$ sudo mv /sbin/mount_ntfs /sbin/mount_ntfs.orig
$ sudo vim /sbin/mount_ntfs
编辑这个文件，加入如下内容：</p>

<h1>!/bin/sh</h1>

<p>/sbin/mount_ntfs.orig -o rw &#8220;$@“ ＃这里调用默认的挂载命令，不过增加了 rw参数，开启读写</p>

<p>保存这个文件，然后：
$ sudo chown root:wheel /sbin/mount_ntfs
$ sudo chmod 755 /sbin/mount_ntfs</p>

<p>然后重启，启动后，你应该就能得到一个可以自由读写的ntfs分区了。不过声明一点，这个功能据说不稳定，不知道是因为版权原因还是真的很不稳定，苹果默认没有开启这个功能。不过我更相信苹果。</p>

<p>＝＝＝＝＝＝＝＝
后话：刚好公司配了一台Dell E6400,偶尔看到有人在上面<a href="http://bbs.pcbeta.com/archiver/tid-625920.html">装了一个Leopard</a>,于是手痒也在上面装了一个，如果有人也有这台笔记本也可以试试看，不过我装好的系统还是有问题：</p>

<p>1，触摸屏一碰就乱跑，我直接禁用就好了，反正也不喜欢用。
2，关机和重启不断电，每天关机的次数也有限，也就无所谓了。
3，声音控制不了，只能在具体的应用程序里控制。
其实问题还是挺多的，不过基本上的使用我觉得还是没什么问题的，触摸屏的问题比较烦人，还好我不喜欢用触摸屏。如果有人也想尝试可以试试看。我用的安装文件是 Snow_Leopard_10.6.1-10.6.2_SSE2_SSE3_Intel_AMD_by_Hazard.iso, 至于安装方法<a href="http://bbs.pcbeta.com/forum-185-1.html">PCbeta</a>上有很多的教程可以参考，摸索一下大概都没有什么问题，安装的时候一定要做好备份，因为我到目前已经因为装Mac OS X丢失了不下10次数据了，大部分情况下都是分区被合并。所以一定要小心一点。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在2009的尾巴上]]></title>
    <link href="http://reeze.cn/2009/12/31/at-the-tail-of-2009/"/>
    <updated>2009-12-31T23:59:06+08:00</updated>
    <id>http://reeze.cn/2009/12/31/at-the-tail-of-2009</id>
    <content type="html"><![CDATA[<p>09年最后一篇日志，充个数吧：）</p>

<p>哈哈，刚买了本《<a href="http://www.douban.com/subject/3735649/">Orange S: 一个操作系统的实现</a>》，这一年下来买了挺多的书，也从图书馆借了很多的书（马上就要毕业了，再也享受不到学校图书馆丰富及时的藏书了，计划以后每个月发工资都买一本自己喜欢的书），发现我读书最大的问题是多而不精，拿一本好书就使劲的翻，很多书都是花几天就翻完了，但是读下来之后总觉得收获不够，一些很需要实践的部分也没有及时联系，总感觉自己浮在表面上，只知其然。所以呢，这个2010年争取多读好书，踏踏实实的啃几本好书，然后就是要多动手啦。</p>

<p>计划2010年呢，能把耽搁很久的想法付诸行动，做出点东西来。希望有个好的开始吧！</p>

<p>Happy New Year!!!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[支持IPv6的Tunnelblick For Mac OS X OpenVPN客户端]]></title>
    <link href="http://reeze.cn/2009/12/30/ipv6-enabled-tunnelblick-for-mac-os-x/"/>
    <updated>2009-12-30T13:20:15+08:00</updated>
    <id>http://reeze.cn/2009/12/30/ipv6-enabled-tunnelblick-for-mac-os-x</id>
    <content type="html"><![CDATA[<p>在<a href="http://yegle.net">yegle</a>那里买了OpenVPN服务 ，用着还挺不错，我也在教育网，所以只能使用支持IPv6版的客户端，openvpn默认不支持IPv6,不过yegle提供了相应的<a href="http://github.com/jjo/openvpn-ipv6">IPv6补丁</a>，在Linux下以及Windows下使用的都挺好，最近又在折腾电脑，装了个Snow Leopard，基本没什么问题了，除了我的ATI 2600 XT硬件加速暂时无解外其他的都挺爽，使用了yegle推荐的<a href="http://code.google.com/p/tunnelblick/downloads/list">Tunnelblick</a>, 总是连接不上，它提示让我查看日志，但是根本就找不到地方看日志，直接cd 到 Tunnelblick的包里面直接执行openvpn命令，提示不支持udp6 ，又是不支持 Ipv6，本想直接自己编译一个openvpn，但是想想那样就太不clean了，编译成app的话可以通用，还能共享给有需要的人多好啊，去google code checkout了一份代码，直接编译，错误百出，我是在Snow Leopard上编译的，仔细查看原来需要MacOSX10.4u的SDK 重新安装10.4的SDK还是未果，后来发现SDK的安装目录居然不一样。。自己手动拷贝过去也不行。。 切换到傲Leopard下安装，折腾了好久终于编译成功，废话太多了。呵呵，共享出来给需要的人吧：）</p>

<p>猛击这个连接 下载<a href="http://code.google.com/p/tunnelblick-ipv6/downloads/list">http://code.google.com/p/tunnelblick-ipv6/downloads/list</a>
可惜的是yegle不再提供IPv6用户的续费了，不过我到期之后差不多也要从学校滚蛋了。
我提供的这个版本的tunnelblick的配置文件位置是  ~/Library/openvpn  最新版的配置放在 ~/Library/Application Support/Tunnelblick/Configuration目录里面。</p>

<p>马上2009年就要过去了。最近很久都没有更新日志了，其实之间也想写一些东西，但是都丢在草稿箱里没写完。论文还有很多没有写完，马上就要交了，要抵制住诱惑乖乖写论文。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在PHP中检查PHP文件是否有语法错误]]></title>
    <link href="http://reeze.cn/2009/10/09/check-php-files-syntax-in-php/"/>
    <updated>2009-10-09T19:21:32+08:00</updated>
    <id>http://reeze.cn/2009/10/09/check-php-files-syntax-in-php</id>
    <content type="html"><![CDATA[<p>之前在当当的时候的一个项目中用到了一个简单的模板引擎，其实也是借鉴discuz来做的模板引擎，很简单，它所作的事情就是把一些自定义的标签编译成php代码。已经说了很简单了，所以编译的时候也名优进行模板语法的检查，那么在开发过程中就会出现编译出来的php文件有语法问题，有语法问题没有关系，我修改重新编译一下就好了。首先不能在每次请求的时候都把php模板重新编译一下，会严重影响性能，折中的处理时在每个编译好的php文件末尾检查一下该模板文件是否已经修改过，根据设定的更新频率，如果又需要则重新编译模板文件，现在的问题是编译出来的php文件自己有语法错误，根本执行不到模板检查那一步，所以即使修改了模板文件中的问题也不会重新编译。 所以我想寻找一种简单的方法来检查生成的php文件是否合法。不合法就重新编译，这样开发过程中就不用出现错误就得手动删除缓存文件了。</p>

<p>在网上找了一下。刚开始以为 token_get_all()函数能处理语法错误的问题，结果发现，它只是做简单的词法分析。没有办法。后来到论坛上去问了一下
http://groups.google.com/group/professional-php/browse_thread/thread/b8581f6b07b10ff0/2601a63c406bb1c1?lnk=gst&amp;q=reeze#2601a63c406bb1c1</p>

<p>有人告诉我有这样一个函数 php_check_syntax() http://www.php.net/manual/en/function.php-check-syntax.php 我想问题就这么坚决了。。我真应该RTF(Read The Fuck Mannual). 仔细一看。这个函数已近被弃用了：
Note: For technical reasons, this function is deprecated and removed from PHP. Instead, use php -l somefile.php from the commandline.</p>

<p>这个technical reason 到底是什么呢？ 先不管了，以后再慢慢研究，反正不能使用这个方法就对了。
他们的建议是使用命令行$php -l filename.php 来检查语法。
Gary Every给了我一个代码片段参考：</p>

<p>在命令行下检查问题也不大。如果我要放在在线应用呢？ 这就涉及到可移植性的问题了。首先是操作系统，然后就是环境变量。这样的话就会依赖于服务器端的配置。在http://www.php.net/manual/en/function.php-check-syntax.php 上有人贴出了自己的php_check_syntax()函数实现。
有的采用的就是上面的命令行的方法。
后面有提到使用eval的方法来验证。eval方法会执行传入的代码， 如果代码有语法错误则会抛出parser error, 可以使用&#8217;@&#8217;错误抑制符去掉错误信息，eval和echo一样并不是函数，不能使用变量函数的方法调用比如：
$func = &#8216;eval&#8217;
$func()这样的调用就是无效的。它会提示没有eval函数，如果你自己定义这么一个函数也是有问题的。因为eval是一个关键字。
eval调用和include差不多，如果被包含文件中没有明确return就返回null。如果直接eval我们需要检查的文件会造成被检查的文件内代码被执行，这可不是我们想要的，我们只需要检查一下这个文件的语法是否正确。 我们可以在要检查的文件之前添加return 语句，让代码提前跳出，那么后面的代码就不会执行了。好的，就这么干。代码如下：
checker.php
`
&#8221;;</p>

<pre><code>    $file_content = $check_code . $file_content . "
</code></pre>

<p>file.php
<code>
b
?&gt;
</code>
因为Parse error 是没法被 set_error_handler处理函数处理的。这个异常没办法catch到。所以才使用了@来抑制错误。这带来的问题就是我们无法得到详细的错误信息。 不过目前我需要的功能也只是检查语法是否正确。不正确的话重新编译模板文件，就这么简单，至于语法错误，在显示网页的时候自然会看得到。
最好的办法就是这个被遗弃的php_check_syntax这个方法回到php中。下次再研究下他们是出于什么原因把这个函数去掉的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[实现一个简单在线HTML编辑器]]></title>
    <link href="http://reeze.cn/2009/10/09/how-to-implement-a-simple-online-html-editor/"/>
    <updated>2009-10-09T15:11:26+08:00</updated>
    <id>http://reeze.cn/2009/10/09/how-to-implement-a-simple-online-html-editor</id>
    <content type="html"><![CDATA[<p>一直没有仔细研究过在线HTML编辑器，以前以为编辑功能很复杂，需要用大量的JavaScript来模拟编辑器的效果，以前都是使用一些开源的HTML编辑器，HTML在各网上随处可见，发表文章，评论。最近自己想做一个类似Things这样的Web版的应用，需要一个想Google  Notebook(可惜的是现在已经停止开发了) 那样的编辑功能，看看现在网上的这些编辑器都庞大了，都是一些自己根本用不到的功能，其实我的需求很简单：简单的编辑既可以，并且需要轻量级一些，因为页面上可能需要开很多个编辑器实例。 所有想自己也来研究一下，看看能不能自己开发一个。</p>

<p>几天前花了一个晚上用firebug看了下Google Docs是怎么做。第一个遇到的问题就是如何让光标停在鼠标点击所在得地方。我刚开始一味都是js模拟出来的，这得有多复杂啊。并且还要兼容各个浏览器，天啊！后来上网一搜发现，浏览器早就想到了我们会有这样的一个需求。其实很简单，两条语句就可以说明HTML编辑器的最为核心的部分：
<code>
document.designMode = 'On';
document.contentEditable = true;
</code>
参考Mozilla上的<a href="https://developer.mozilla.org/en/Rich-Text_Editing_in_Mozilla">这篇</a>文章，介绍了HTML编辑的基本信息，要自己DIY一个常用功能的HTML编辑，这篇文章已经够你用的了。</p>

<p>在你的网页中嵌入这两条语句试试看：），你就会发现你的网站整个得都变的可以编辑了。可以随便乱修改。 不过放心，这样修改并不会破坏你的网站， 当然你也不希望你的整个网站是可以编辑的。例如我们只希望别人发布一条评论，只希望评论输入框可以输入。 要实现这样的效果可以有两种做法：</p>

<p>第一种就是使用直接让某个元素变成可编辑的例如：</p>

<p>index.html
`
Test TextEditor</p>

<h1>Hi, HTML Editor!</h1>

<p>Hello, you comment please</p>

<p>Your comment</p>

<p>Get HTML
`
点击该区域后该区域的内容就变成可以编辑的了，这是我们就是对其进行简单的编辑。你可能会觉得直接编辑的功能太简单了，比如想要插入链接或者图片什么的。就没有办法了。这些功能浏览器并没有帮我们做好，不过实现这些功能也不麻烦， 参考上面Mozilla的文档。浏览器都提供了常用的功能API。</p>

<p>一般的编辑器都会提供一个工具栏之类的按钮来编辑文本内容。比如我使用的WordPress提供的编辑器：</p>

<p>[caption id=&#8221;attachment_42&#8221; align=&#8221;alignnone&#8221; width=&#8221;936&#8221; caption=&#8221;wordpress提供的编辑器&#8221;]<a href="http://reeze.cn/uploads/2009/10/5b9e5c0b92f7fdf042ea3993165b80ec.png"><img src="http://reeze.cn/uploads/2009/10/5b9e5c0b92f7fdf042ea3993165b80ec.png" alt="wordpress提供的编辑器" /></a>[/caption]</p>

<p>可以对文字内容进行操作，加粗下划线，字体，对齐等等，并且提供可视化以及HTML编辑模式。</p>

<p>这个和FCKeditor 以及tinymce之类的编辑器使用的编辑方式和上面我提到的直接编辑html对象的方法不一样，他们使用的是iframe，使用iframe有很多好处，iframe中的文档和当前文档并不会因为样式或者HTML结构而影响到彼此，所以大部分的编辑器都是使用这种方式。它们基本的方式都是：</p>

<ol>
<li><p>在页面中使用一个不可见的字段比如:“input, textarea&#8221;之类表单字段，他们的值就是需要编辑的内容。</p></li>
<li><p>页面初始化好，比如载入编辑器相关的一些脚本，也是就是window.onload好以后。创建一个iframe来显示可编辑区域，iframe初始化好以后读取父窗(相对于这个iframe)口的这个不可见表单值的内容，使之成为iframe中的body的html，也就是把所有需要编辑的内容添加到iframe中</p></li>
<li><p>iframe中的内容初始化好以后，在iframe中执行上面提到的：
<code>
document.designMode = 'On';
document.contentEditable = true;
</code>
把iframe整个窗口变成可以编辑的</p></li>
<li><p>进行编辑，这时候的编辑可能需要一个工具栏，基于同样的原因，一般工具栏也会是一个iframe，显示它们自己的编辑按钮。编辑是就利用浏览器提供的接口来对ifame中的内容进行编辑</p></li>
<li><p>父窗口中提交表单之前或者你需要的地方需要把编辑器中编辑完的内容回写到你的表单字段中去，否则编辑结果没有保存写来就没有意义了。</p></li>
</ol>


<p>基本原理就是这样。要做出这样一个东西来，需要的就是一些细活了。要想做出一个FCk这样好用的编辑器也不是那么简单的。但是至少我们知道它是怎么运作的。 这就够了。</p>

<p>花了点时间做了一个简单的编辑器，真正要用的话很多的细节还是需要好好处理的，代码没有怎么清理，是变想边写，不是很完整。</p>

<p>需要的同学可以下来参考参考。
猛击 <a href="http://reeze.cn/uploads/2009/10/editor.rar"> >> 这里 &lt;&lt; </a>下载代码。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[基于var_export 和 include返回值的缓存方案]]></title>
    <link href="http://reeze.cn/2009/07/02/a-cache-system-using-var_export-and-includes-return-value/"/>
    <updated>2009-07-02T12:55:41+08:00</updated>
    <id>http://reeze.cn/2009/07/02/a-cache-system-using-var_export-and-includes-return-value</id>
    <content type="html"><![CDATA[<p><a href="http://reeze.yo2.cn/2009/07/01/php-include-function-return-value-and-method-of-void-serialize/">前一篇文章</a>我们研究了include调用返回值的问题，并指出可以通过这种方式来完成序列化相同的功能，现在我就来研究一下这种方法的可行性和效率，因为直接的返回php值肯定是比unserialize()函数要快。</p>

<p>第一步我们来研究下怎么将php对象持久化的保存起来。下面是我定义的一些变量：</p>

<p><code>
private $_var;
public $pub = array('pub value', 3, 4);
public function __constructor($var)
{
$this-&gt;_var = $var;
}</code></p>

<p>`public function show()
{
echo $this->_var;
}
}</p>

<p>$string = &#8220;It&#8217;s a string&#8230;&#8221;;
$array = array(1, 2, &#8216;key&#8217; => &#8216;value&#8217;, array(&#8216;sub-array&#8217;));
$number = 135345.55;
$class = new MyClass(&#8216;class var&#8217;);</p>

<p>`</p>

<p><code>//通过serialize()方法我们可以将他们持久化比如：
echo serialize($string); //s:16:"It's a string...";
echo serialize($array); //a:4:{i:0;i:1;i:1;i:2;s:3:"key";s:5:"value";i:2;a:1:{i:0;s:9:"sub-array";}}
echo serialize($number); //d:135345.5499999999883584678173065185546875;
echo serialize($class); //O:7:"MyClass":2:{s:13:"MyClass_var";N;s:3:"pub";a:3:{i:0;s:9:"pub value";i:1;i:3;i:2;i:4;}}
// 我们可以将这些序列化的结果存到文件中，在需要的时候unserialize()返回得到相应的值，但是现在我不会这么做。
</code></p>

<p>前篇文章提到了通过include返回值来直接取得php值对象，首先我们要把值保存起来，因为我们要通过include来包含它，首先遇到的问题就是我们的序列化函数必须要生成合法的php表达式才行，否则include是无法得到相应的返回值的
比如我们要序列化 字符串 &#8220;abcd&#8221; 我们可以这么做
<code>
file_puts_content("data.php", "return 'abcd';");
//然后这样取得相应的值
$string = include "data.php";
echo $string; // 它应该输出 abcd
</code>
那数组怎么办呢？比如上面的数组。我们可以自己编写这个序列化函数
<code>
function encode($var){
if (is_array($var)) {
$code = 'array(';
foreach ($var as $key =&gt; $value) {
$code .= "'$key'=&gt;".encode($value).',';
}
$code = chop($code, ','); //remove unnecessary coma
$code .= ')';
return $code;
} else {
if (is_string($var)) {
return "'".$var."'";
} elseif (is_bool($var)) {
return ($var ? 'TRUE' : 'FALSE');
} elseif (is_numeric($var)) {
return "$var";
}
else
{
return 'NULL';
}
}
}</code>
这个函数可以将字符串，数组以及数字变成合法的php表达式。
比如：
file_put_contents(&#8220;data.php&#8221;, &#8220;&lt;?phpn return &#8221; . encode($array) . &#8220;;n&#8221;);
data.php文件的结果是：
<code>
return array ( 0 =&gt; 1, 1 =&gt; 2, 'key' =&gt; 'value', 2 =&gt; array ( 0 =&gt; 'sub-array', ), )array(4) { [0]=&gt; int(1) [1]=&gt; int(2) ["key"]=&gt; string(5) "value" [2]=&gt; array(1) { [0]=&gt; string(9) "sub-array" } }
</code>
我们的目的达到了。可以直接的通过include这个文件来得到我们的值。
但是现在有个问题，我们没有序列化对象类型的值，这个该怎么处理呢？
一个类对象有对象的状态和对象的行为，行为在类定义完以后就确定了，所以每个类的实例的行为都是一样的。所以我们可以不考虑，我们只需要考虑类对象的状态就可以了，简单来讲就是类的属性状态需要保存起来。那怎么样得到一个类的属性呢？
经过一番搜寻以后发现一个函数
get_object_vars
(PHP 4, PHP 5)get_object_vars &#8211; 返回由对象属性组成的关联数组
这个函数可以获得对象的属性关联数组，也就只可以得到对象的状态，但是对象的属性有各种访问控制，get_object_vars()函数在对象外访问只能得到对象的公开属性，而无法得到私有属性，这样的话我们就无法得到对象的全部状态，不可行，但是在对象内可以得到对象的所有属性，那我们可不可以在对象内定义一个___get_properties()方法来返回这些状态呢。
给类增加这样一个方法
<code>
public function __get_properties()
{
return get_obj_vars($this);
}
</code>
这样我们就可以得到类的所有属性了。第一步算是完成了，我们得到状态该怎么重新恢复出来呢？要在对象外部给对象设置属性我们只有两种情况：一种是这个属性是公开属性，我们可以直接赋值 比如： $obj->prop = $value; 如果是私有属性我们则需要自己增加setter方法比如 setProp($value);方法，来设置。但是这就会遇到一个问题，我们的属性要么是公开属性，要么必须要有setter方法来设置，很多情况下我们不希望给类增加这么多没有实际用处的方法，也为了封装性，不会有这么多的setter方法。虽然我们能得到对象的状态，但是却无法恢复对象状态，这样的话，我们的序列化方法也就没有什么意义了。我们探索到现在算是失败了。
解决办法：var_export()函数。</p>

<h2>在看symfony代码的时候发现了这个函数，手册是这么描述的：</h2>

<p>var_export
(PHP 4 >= 4.2.0, PHP 5)var_export &#8211; 输出或返回一个变量的字符串表示
描述
mixed var_export ( mixed expression [, bool return] )</p>

<p>此函数返回关于传递给该函数的变量的结构信息，它和 var_dump() 类似，不同的是其返回的表示是合法的 PHP 代码。</p>

<p>您可以通过将函数的第二个参数设置为 TRUE，从而返回变量的表示。</p>

<p>这个就是我们想要的那个函数,我们来看看这个函数是怎么使用的。
<code>
//变量继续使用上面定义的变量
echo var_export($string); //'It's a string...'
echo var_export($array); /* array (0 =&gt; 1, 1 =&gt; 2, 'key' =&gt; 'value', 2 =&gt; array (0 =&gt; 'sub-array', ),)*/
echo var_export($number); // 135345.55
echo var_export($class); /* MyClass::__set_state(array('_var' =&gt; NULL, 'pub' =&gt; array (0 =&gt; 'pub value', 1 =&gt; 3, 2 =&gt; 4)) */
</code>
我们可以看到生成的都是合法的PHP表达式。通过设置第二个参数为true，就可以将返回结果赋值给变量比如$new_array_string = var_export($array, TRUE);然后将这个结果写入文件持久化</p>

<p>file_put_contents(&#8220;data.php&#8221;, &#8220;public function <em>_constructor($var)
{
$this-></em>var = $var;
}</p>

<p>public function show()
{
echo $this->_var;
}
public static function __set_state(array $array)
{
$tmp = new MyClass();
foreach($array as $key => $value)
{
$this->$key = $value;
}
}
}</p>

<p>// 一些变量
$string = &#8220;It&#8217;s a string&#8230;&#8221;;
$array = array(1, 2, &#8216;key&#8217; => &#8216;value&#8217;, array(&#8216;sub-array&#8217;));
$number = 135345.55;
$class = new MyClass(&#8216;class var&#8217;)</p>

<p>// 缓存
cache(&#8220;string.data.php&#8221;, $string); // 当然扩展名不一定非得php， 文件名我也只是简单的处理
cache(&#8220;array.data.php&#8221;, $array);
// 等等。。。</p>

<p>// 获取数据,当然也可以在其他文件中来获取。
$class = cache_get(&#8220;class.data.php&#8221;);</p>

<p>参考：http://www.thoughtlabs.com/2008/02/02/phps-mystical-__set_state-method/?dsq=12016456</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP中include语句的返回值及避免序列化开销的方法]]></title>
    <link href="http://reeze.cn/2009/07/01/a-way-use-include-to-avoid-unserialize/"/>
    <updated>2009-07-01T18:24:21+08:00</updated>
    <id>http://reeze.cn/2009/07/01/a-way-use-include-to-avoid-unserialize</id>
    <content type="html"><![CDATA[<p>以前乱翻symfony生成的缓存文件的时候看到很多类似：</p>

<p><code>
"value"); ?&gt;
</code></p>

<p>这种表达式，当时并没有怎么在意，今天研究symfony代码的时候看到这样一句代码</p>

<p><code>
classes = include($file); ?&gt;;
</code></p>

<p>一直都是通过include require来包含文件，但是从来没有使用过他的返回值，印象中include返回的无非是true或者false吧。今天自己看了下文档，发现在php文件中是可以直接调用return的。比如：</p>

<p>`
// return.php</p>

<p>// get_return.php</p>

<p>echo $value; // 输出 Array, 因为$value 是从return.php返回的一个数组
?>
`
其实项目中很少情况需要这样的返回方法。如果想要从return.php中得到返回值一般是通过调用return.php中所调用的函数来得到。</p>

<p>在symfony中这种方式就很合理，如果大家熟悉symfony的话，应该知道，symfony运行起来以后会在cache目录下生成系统配置文件的缓存,诚然可以通过序列化的方式来缓存这些信息，但是反序列化是需要消耗资源的。通过这种方式来做持久化也是个不错的选择.</p>
]]></content>
  </entry>
  
</feed>
