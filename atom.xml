<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Zen Space]]></title>
  <link href="http://reeze.cn/atom.xml" rel="self"/>
  <link href="http://reeze.cn/"/>
  <updated>2014-01-05T14:53:00+08:00</updated>
  <id>http://reeze.cn/</id>
  <author>
    <name><![CDATA[reeze]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[2013年终总结及2014规划]]></title>
    <link href="http://reeze.cn/2014/01/01/happy-2014/"/>
    <updated>2014-01-01T00:00:00+08:00</updated>
    <id>http://reeze.cn/2014/01/01/happy-2014</id>
    <content type="html"><![CDATA[<p>2013 结束了，迎来了新的一年。年复一年，我们在前行，虽然匆忙，也是时候停下来想一想了，回顾一下过去的一年都有哪些收获，规划一下来年。</p>

<h2>2013年回顾：</h2>

<p>找了一下去年的总结，发现被自己删掉了，因为不完整。原来计划2013年完成TiPHP的实现。这个计划没有做完。学习@胖胖，不找借口，是没有足够的时间。</p>

<p>这一年：</p>

<ol>
<li>生活

<ol>
<li>情感上终于跟随自己的内心做自己了，年末的三个月是我所经历过最完美的时光。</li>
<li>运动上，坚持了半年多每周的羽毛球，还有跑步，身体没有以前好，不过后面3个多月运动的少了。</li>
</ol>
</li>
<li>工作

<ol>
<li>代码量不足，相对以前代码的编写量不足，14年会努力提高代码量和代码质量。</li>
<li>收获

<ul>
<li>私有云平台的设计实现，对在线业务的运维和支持体系有了新的理解。除了基础本身基础设施的重要性非常大。是每个公司都要考虑的问题。</li>
<li>LAMP技术的投入。主要是在性能优化上，做了一些业务的优化，对优化技术上也学到了不少。</li>
<li>6月份参加 PHPConf 分享了贴吧的LAMP架构，第一次参加技术会议，学习到不少：

<ul>
<li>首先得感谢胖胖 @phppan 的引荐，一直没有想过要主动参加什么 会议。</li>
<li>准备PPT的过程 很感谢定坤的支持，立强和洪波专业细致的指导，让我的讲稿如此的出色，同事也要感谢 所有贴吧同事给的意见。</li>
</ul>
</li>
<li>职业上有了提升，仍然是需要感谢定坤，立强和洪波，你们给了我极大的帮助，很感谢定坤的认可，感谢立强的帮助，以及专业靠普通的洪波。</li>
</ul>
</li>
</ol>
</li>
<li>自我提升

<ul>
<li>业余项目

<ul>
<li>php-leveldb, 写完后维护的少了。主要是自己的需求其实不多。所以放着了。</li>
<li>php开源：对PHP本身的贡献开始变慢了。是观察力不够，没有特别好的想法。</li>
<li>hhvm：提交了4个小的补丁</li>
<li>TIPI：精力赶不上，更新很慢，有很多热心读者发信来问，表示歉意。</li>
</ul>
</li>
<li>读书，主要有：

<ul>
<li>《Critical Thinking》</li>
<li>《Think fast and slow》</li>
<li>《编译原理》

<ul>
<li>学习了cousera 上的编译原理课程，收获很大，对语言的设计实现上又了较全面的理解。</li>
</ul>
</li>
<li>《编译器设计》</li>
<li>《伊豆的舞女》</li>
</ul>
</li>
</ul>
</li>
</ol>


<p>总结来说：
2013年是比较充实的一年，情感上有很大的收获，工作上很感谢有leader的认可，感谢有很好的技术氛围，
有非常有经验的同事，让我能够不停的成长。</p>

<h2>2014年规划和愿望：</h2>

<p>2014年是我一个新的开始，主要专注在技术的深度和个人影响力的提升上。
同时要提升生活品质，要学会感恩，要学会经营，全力的投入，无论和感情还是工作上。</p>

<p>不用担心没有方向，前进了，方向自然会出现；努力了，自然会有收获。不瞻前顾后。</p>

<ol>
<li>生活

<ul>
<li>Be together with my girl.</li>
<li>完成memory的设计和制作</li>
<li>去厦门</li>
<li>坚持每周至少运动6小时，提高身体素质</li>
<li>认识更多的朋友，学习他们优良的品质和能力</li>
</ul>
</li>
<li>技术

<ul>
<li>学习数据库的实现细节和优化</li>
<li>投入精力学习HHVM，参与开发，每个月至少提交一个补丁</li>
<li>研读lua的实现并完成学习笔记</li>
<li>完成TiPHP项目</li>
</ul>
</li>
<li>工作

<ul>
<li>完成访问中间件的重构</li>
<li>在性能优化及LAMP技术上有产出</li>
<li>在架构及影响力上有进一步的提升</li>
</ul>
</li>
<li>自我提升

<ul>
<li>课程学习：至少<em>完整</em>的学习3门cousera上的课程。</li>
<li>读书：

<ul>
<li>技术类：至少4本。精读。

<ul>
<li> 《哥德尔，艾舍尔，巴赫》买来好久没有读，开始读完以后发现非常有意思。</li>
</ul>
</li>
<li>非技术类：至少4本。</li>
</ul>
</li>
</ul>
</li>
<li>新年愿望:

<ul>
<li>母亲身体健康，快乐。</li>
<li>我的宝贝能感受到她渴望的快乐和充实，心想事成。</li>
<li>大侄子夏飞今天的高考能有个好成绩，我的第一个侄子，很聪明，希望他能沉着应对，我相信他能做最好的自己。</li>
<li>二侄子夏伟能突破自己，性格中内向的部分能更阳光，希望他能感受到世界的美好，
我要尽自己的力量让他快乐的度过有些艰难的过程。</li>
<li>三侄子夏俊能尽快进入状态</li>
<li>小宝宝们健康</li>
</ul>
</li>
</ol>


<p>以前还会有一些物质上的愿望，比如相机，MacBook之类的，刚才绞尽脑汁都没有想到自己想要
什么样具体的礼物。还是以前那样：我只在乎物质带来的精神收益，不靠虚浮的物质来满足内心的需要。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[有关无开销异常]]></title>
    <link href="http://reeze.cn/2013/12/18/zero-cost-exception/"/>
    <updated>2013-12-18T11:54:00+08:00</updated>
    <id>http://reeze.cn/2013/12/18/zero-cost-exception</id>
    <content type="html"><![CDATA[<p>在编写程序中我们无时不刻的在处理异常，异常处理</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nginx中location的匹配和rewrite]]></title>
    <link href="http://reeze.cn/2013/10/30/nginx-location-rewrite/"/>
    <updated>2013-10-30T23:59:00+08:00</updated>
    <id>http://reeze.cn/2013/10/30/nginx-location-rewrite</id>
    <content type="html"><![CDATA[<p>最近在线上进行nginx规则的调整的时候遇到一个问题，发现在location匹配时候可能会踩到的一个坑。</p>

<p>location在匹配规则的时候匹配的是归一化之后的URL，比如多个斜杠或者URL中带&#8221;.&#8221;, &#8220;..&#8221;的都会被
归一化。</p>

<p>而在内部rewrite的时候新的URL地址是不会再次被归一化的。这种不一致如果没有留意可能会遇到问题。</p>

<p>比如：</p>

<pre><code>````
if ($request_uri ~ "/api") {
    rewrite (.*) /newapi/$1;    # 斜杠多余了
}

location /newapi/api {
    set $testapi 1;
}

location /newapi {
    # ...   
}
````
</code></pre>

<p>对于上面的配置中，rewrite的时候不小心多写了个斜杠，对于这个配置，
如果用地址：/api访问的话  /newapi/api 这个location是不能被匹配的。
而用地址<code>/newapi//api</code>直接访问是可以匹配到/newapi/api这个location的。</p>

<p><strong>本质上是因为用户直接访问的URL会先归一化处理，而rewrite之后是不会处理的。</strong></p>

<p>具体见文档： <a href="http://nginx.org/en/docs/http/ngx_http_core_module.html">http://nginx.org/en/docs/http/ngx_http_core_module.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[译文]可伸缩Go调度器设计文档]]></title>
    <link href="http://reeze.cn/2013/07/14/translation-scalable-go-scheduler-design-doc/"/>
    <updated>2013-07-14T16:34:00+08:00</updated>
    <id>http://reeze.cn/2013/07/14/translation-scalable-go-scheduler-design-doc</id>
    <content type="html"><![CDATA[<p>原文: Scalable Go Scheduler Design Doc <a href="https://docs.google.com/document/d/1TTj4T2JO42uD5ID9e89oa0sLKhJYD0Y_kqxDv3I3XMw/edit?pli=1">https://docs.google.com/document/d/1TTj4T2JO42uD5ID9e89oa0sLKhJYD0Y_kqxDv3I3XMw/edit?pli=1</a></p>

<p>TODO</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go学习笔记：空标示符-]]></title>
    <link href="http://reeze.cn/2013/05/06/golang-blank-indentifier/"/>
    <updated>2013-05-06T21:49:00+08:00</updated>
    <id>http://reeze.cn/2013/05/06/golang-blank-indentifier</id>
    <content type="html"><![CDATA[<p>开始学习下Go语言，为了强化记忆开始记一些学习笔记。</p>

<p>Go语言是一门很简单的语言，它为我们做了很多的决定，比如很多在其他语言中
不推荐使用的编码风格在Go是不允许的。比如： 变量或者包声明或导入后没有使用是无法编译通过的。
它的编译只有Fatal没有Warning，这对于代码质量是很有好处的。在其他语言中
最佳实践也是编写warning-free的代码。Go把这个最佳实践放到了语言级别。</p>

<h2>Go中的空标示符(blank indentifier): _</h2>

<p>刚开始在看到Go中的空标示符是以为它只是一种约定，因为下划线看起来比那么的
显眼，而普通变量又不太可能只使用一个下划线来命名，在其他语言中我们不想使用
一个变量的话很简单忽略之就可以了，而如果对一个函数的返回值不感兴趣的话，
不对返回值赋值即可。</p>

<p>先记录下结论：<em>空标示符不是一个普通变量或标示符，而是一个特殊的标示符，
对于这种类型的标示符绑定表达式时不进行真正的绑定。</em></p>

<p>这是什么意思呢？也就说比如将一个值赋值给空操作符是不会进行值绑定的。</p>

<figure class='code'><figcaption><span>blank indentifier - test.go </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">package</span> <span class="n">main</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="n">_</span> <span class="s">&quot;io&quot;</span>  <span class="c1">// 如果不重名名包为_ 而在代码中没有使用这个包会编译不通过</span>
</span><span class='line'>          <span class="c1">// 这样导入一个包是有副作用的，导入一个包后会执行包的init()方法，</span>
</span><span class='line'>          <span class="c1">// 如果只是为了避免编译不通过而绑定到_是不推荐的做法。</span>
</span><span class='line'>    <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">getMulti</span><span class="p">()</span> <span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">_</span> <span class="p">=</span> <span class="mi">20</span>        <span class="c1">// 绑定没有作用，不会报错</span>
</span><span class='line'>  <span class="c1">// _ := 10  // 编译不通过，因为表达式左边没有一个有效的新的标示符</span>
</span><span class='line'>              <span class="c1">// no new variables on left side of :=</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">x</span><span class="p">,</span> <span class="n">_</span> <span class="p">:=</span> <span class="n">getMulti</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">fmt</span><span class="p">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">&quot;%d\n&quot;</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">// fmt.Printf(&quot;%d\n&quot;, _)   这样是编译不通过的，因为_并不能被赋值</span>
</span><span class='line'>  <span class="c1">//                         编译 &quot;cannot use _ as value&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>总结</h2>

<p>空标示符不是普通标示符，是一个语言级别的标示符，通常用来:</p>

<ol>
<li><p>显式的忽略函数或其他多值赋值表达式中的某些的返回值，多值表达式通常有：</p>

<ul>
<li>函数的多个返回值</li>
<li>range循环中的key-value值</li>
<li>多值赋值，比如： x, y, z := 10, 20, 30, 不过这种情况比较小</li>
</ul>
</li>
<li><p>或者导入包不使用包而只利用包的初始化函数的副作用。但是不推荐用这种方式
来绕过因为包未被使用而编译不通过的问题</p></li>
</ol>


<p>这里只是做一个笔记，其实Go的语言规范中写的还是很详细的。对于一些有疑惑的地方
一翻手册就会发现答案。这也是一门语言小的好处，歧义会非常少。</p>

<h2>参考资料</h2>

<ol>
<li>Golang 官方 <a href="http://golang.org">http://golang.org</a></li>
<li>Golang 语言规范 <a href="http://golang.org/ref/spec">http://golang.org/ref/spec</a>Go的语言规范非常小，所有语言语法规范
都在这里可以找到。</li>
<li>《The Way to Go》这本书是目前比较全面的一本，在看完<a href="http://golang.org/doc/">Go的手册</a>之后推荐阅读</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[怎么样追查PHP的Bug、Segment fault(core dump):方法，工具等]]></title>
    <link href="http://reeze.cn/2013/03/11/how-to-trace-a-php-crash-segfault/"/>
    <updated>2013-03-11T17:07:00+08:00</updated>
    <id>http://reeze.cn/2013/03/11/how-to-trace-a-php-crash-segfault</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LevelDB扩展发布V0.1版本]]></title>
    <link href="http://reeze.cn/2012/09/12/new-ext-php-leveldb-pecl/"/>
    <updated>2012-09-12T23:16:00+08:00</updated>
    <id>http://reeze.cn/2012/09/12/new-ext-php-leveldb-pecl</id>
    <content type="html"><![CDATA[<p>很开心，第一个提交的PHP扩展已经在PECL官方发布了，这是一个<a href="http://code.google.com/p/leveldb/">Google LevelDB</a>的PHP
封装，主要用于对LevelDB的访问，目前已经实现了LevelDB最具价值的一些特性：迭代器，快照等。</p>

<p>LevelDB数据的设计是只能单进程访问的（多线程没有问题），所以通常这个扩展不合适作为普通的Web应用数据存储，
可以作为离线的数据存储用，或者只是方便读取现有leveldb的数据。</p>

<p>如果有需要可以前去 <a href="http://pecl.php.net/package/leveldb">http://pecl.php.net/package/leveldb</a> 下载。基本的使用说明在<a href="http://reeze.cn/php-leveldb/">http://reeze.cn/php-leveldb/</a>
详细的API文档由勤劳高效的胖胖<a href="http://www.phppan.com/">http://www.phppan.com/</a>编写，不过还没有发布。</p>

<p>同时，还有了@php.net的马甲一枚: reeze(at)php.net。MARK一下。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[怎么样获取PHP函数默认参数的常量名]]></title>
    <link href="http://reeze.cn/2012/07/22/how-to-get-php-functions-const-parameters-name/"/>
    <updated>2012-07-22T20:40:00+08:00</updated>
    <id>http://reeze.cn/2012/07/22/how-to-get-php-functions-const-parameters-name</id>
    <content type="html"><![CDATA[<p>好久没有更新了，发篇占位文：如果某个函数的默认参数是个常量，那么怎么样获取这个参数的常量名称？见代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">new_blog</span><span class="p">(</span><span class="nv">$title</span> <span class="o">=</span> <span class="nx">DEFAULT_TITLE</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// blahblah</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在上面的代码中，怎么样获取函数new_blog函数的参数$title所对应的默认值常量名： <code>DEFAULT_TITLE</code>。这个问题和以前我曾写过的一篇
关于<a href="http://reeze.cn/2010/12/26/how-to-get-a-php-variables-name-a-custom-php-syntax-implementation/">如何获取变量名称</a>的博文相似。</p>

<p>这个问题，在PHP5.4.6之前基本上没有解决方法了，因为函数定义是编译时的信息，在PHP运行时是获取不到的。
当然这里说的无法实现是指的使用官方PHP版本时没法搞定。</p>

<p>在PHP中类似的需求，一般都可以使用PHP的反射扩展。</p>

<h3>PHP的反射(Reflection)</h3>

<p>反射是PHP5中提供的用于获取或操作PHP内部信息的标准扩展，可能写应用代码的用户使用的较少一些，
编写框架或者平台性的系统会使用到。</p>

<p>比如你的框架需要实现一种插件机制，而你可能需要利用反射来获取类或者函数的元信息。
这里就不对Reflection的使用做过多的介绍了，详细信息见官方文档： <a href="http://cn.php.net/manual/en/book.reflection.php">http://cn.php.net/manual/en/book.reflection.php</a></p>

<h3>新的函数ReflectionParameter::getDefaultValueConstantName()</h3>

<p>不过在PHP5.4.6之前，Reflection是没有实现该功能的。这个需求其实来自PHPUnit的作者<a href="https://github.com/sebastianbergmann">Sebastian Bergmann</a>。
因为这个需求在Reflection模块来说是一个缺失，不属于大功能的升级，所以直接进入了目前的最新分支PHP-5.4。
同时这个功能在PHP-5.4.6中可用了。<a href="https://github.com/php/php-src/blob/PHP-5.4.6/NEWS#L41">https://github.com/php/php-src/blob/PHP-5.4.6/NEWS#L41</a></p>

<p>实现代码见：<a href="https://github.com/php/php-src/commit/13a9555342a4156a6150818234639b49a596ccd6">https://github.com/php/php-src/commit/13a9555342a4156a6150818234639b49a596ccd6</a>,
这个方法目前没有使用说明，不过看名字应该也能明白。不过可以参考<a href="https://github.com/php/php-src/commit/13a9555342a4156a6150818234639b49a596ccd6#diff-1">测试用例</a>。</p>

<p>这个提交给ReflectionParameter类增加了两个函数：</p>

<ol>
<li>ReflectionParameter::isDefaultValueConstant() 用于判断函数的这个参数是否是常量默认参数</li>
<li>ReflectionParameter::getDefaultValueConstantName() 用于获取这个常量默认参数的参数名称</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nb">define</span><span class="p">(</span><span class="s2">&quot;CONST_TEST_1&quot;</span><span class="p">,</span> <span class="s2">&quot;const1&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">ReflectionParameterTest</span><span class="p">(</span><span class="nv">$test1</span><span class="o">=</span><span class="k">array</span><span class="p">(),</span> <span class="nv">$test2</span> <span class="o">=</span> <span class="nx">CONST_TEST_1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">echo</span> <span class="nv">$test</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nv">$reflect</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ReflectionFunction</span><span class="p">(</span><span class="s1">&#39;ReflectionParameterTest&#39;</span><span class="p">);</span>
</span><span class='line'><span class="k">foreach</span><span class="p">(</span><span class="nv">$reflect</span><span class="o">-&gt;</span><span class="na">getParameters</span><span class="p">()</span> <span class="k">as</span> <span class="nv">$param</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nv">$param</span><span class="o">-&gt;</span><span class="na">getName</span><span class="p">()</span> <span class="o">==</span> <span class="s1">&#39;test1&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nb">var_dump</span><span class="p">(</span><span class="nv">$param</span><span class="o">-&gt;</span><span class="na">isDefaultValueConstant</span><span class="p">());</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nv">$param</span><span class="o">-&gt;</span><span class="na">getName</span><span class="p">()</span> <span class="o">==</span> <span class="s1">&#39;test2&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nb">var_dump</span><span class="p">(</span><span class="nv">$param</span><span class="o">-&gt;</span><span class="na">isDefaultValueConstant</span><span class="p">());</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nv">$param</span><span class="o">-&gt;</span><span class="na">isDefaultValueAvailable</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="nv">$param</span><span class="o">-&gt;</span><span class="na">isDefaultValueConstant</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>      <span class="nb">var_dump</span><span class="p">(</span><span class="nv">$param</span><span class="o">-&gt;</span><span class="na">getDefaultValueConstantName</span><span class="p">());</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Foo2</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">const</span> <span class="no">bar</span> <span class="o">=</span> <span class="s1">&#39;Foo2::bar&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Foo</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">const</span> <span class="no">bar</span> <span class="o">=</span> <span class="s1">&#39;Foo::bar&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">baz</span><span class="p">(</span><span class="nv">$param1</span> <span class="o">=</span> <span class="nx">self</span><span class="o">::</span><span class="na">bar</span><span class="p">,</span> <span class="nv">$param2</span><span class="o">=</span><span class="nx">Foo2</span><span class="o">::</span><span class="na">bar</span><span class="p">,</span> <span class="nv">$param3</span><span class="o">=</span><span class="nx">CONST_TEST_1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$method</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ReflectionMethod</span><span class="p">(</span><span class="s1">&#39;Foo&#39;</span><span class="p">,</span> <span class="s1">&#39;baz&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$params</span> <span class="o">=</span> <span class="nv">$method</span><span class="o">-&gt;</span><span class="na">getParameters</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">foreach</span> <span class="p">(</span><span class="nv">$params</span> <span class="k">as</span> <span class="nv">$param</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$param</span><span class="o">-&gt;</span><span class="na">isDefaultValueConstant</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">var_dump</span><span class="p">(</span><span class="nv">$param</span><span class="o">-&gt;</span><span class="na">getDefaultValueConstantName</span><span class="p">());</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">// 运行结果</span>
</span><span class='line'><span class="x">bool(false)</span>
</span><span class='line'><span class="x">bool(true)</span>
</span><span class='line'><span class="x">string(12) &quot;CONST_TEST_1&quot;</span>
</span><span class='line'><span class="x">string(9) &quot;self::bar&quot;</span>
</span><span class='line'><span class="x">string(9) &quot;Foo2::bar&quot;</span>
</span><span class='line'><span class="x">string(12) &quot;CONST_TEST_1&quot;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初试Travis-CI]]></title>
    <link href="http://reeze.cn/2012/07/15/introduction-to-travis-ci/"/>
    <updated>2012-07-15T20:26:00+08:00</updated>
    <id>http://reeze.cn/2012/07/15/introduction-to-travis-ci</id>
    <content type="html"><![CDATA[<p>Travis CI是一个基于云的<a href="http://en.wikipedia.org/wiki/Continuous_integration">持续集成</a>项目，
目前已经支持大部分主流语言了，比如：C，PHP，Ruby，Python, Nodejs等等。和<a href="http://jenkins-ci.org/">Jenkins</a>类似，
Travis CI也是开源的，不过Travis和Github集成非常紧密，官方的集成测试托管只支持Github项目，
不过你也可以搭建一套自己的方案。 这里有一篇比较详实的<a href="http://www.juvenxu.com/2012/03/06/travis-ci/">对Travis-CI的介绍</a>，
同时InfoQ上也有一篇<a href="http://www.juvenxu.com/2012/03/06/travis-ci/">关于Travic_CI的报道</a>，</p>

<p>如果你有开源项目，那么Travis绝对值得一试，目前托管在Github上的大部分知名项目都使用了Travis来做集成测试。
比如Ruby语言的：Rails, Rack, Sinatra, RSpec, Cumber, Node.js, PHP的：Symfony2, Doctrine2, Zend Framework 2。</p>

<p>PHP语言也<a href="https://github.com/php/php-src">使用了Travis做集成测试</a>，不过目前由于PHP的扩展众多，
很多的测试用例本身也不够健壮，PHP的测试经常会失败。</p>

<p>使用Travis-CI的项目可以在说明文件中增加目前版本的构建状态。Travis为每个项目提供一个图片地址，比如PHP的：
https://secure.travis-ci.org/php/php-src.png?branch=master,
<img src="https://secure.travis-ci.org/php/php-src.png?branch=master" alt="php-src" />，之所以是构建失败，是因为前面提到的原因。</p>

<p>如果构建成功，图片将显示：<img src="https://secure.travis-ci.org/reeze/php-leveldb.png?branch=master" alt="php-leveldb" />，
这是我最近在写的一个扩展：<a href="https://github.com/reeze/php-leveldb">php-leveldb</a>的构建状态<a href="http://travis-ci.org/reeze/php-leveldb">http://travis-ci.org/reeze/php-leveldb</a></p>

<p>下面简单介绍一下，如果你在编写一个PHP扩展，该怎么样使用Travis-CI来做持续集成。
当然，你的代码需要在Github上进行托管。</p>

<h2>Travis-CI配置文件</h2>

<p>要使用Travis，首先需要在你的代码根目录下包含一个叫做.travis.yml的文件，这是一个配置文件，
为<a href="http://www.yaml.org">yaml格式</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">language</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">php</span>
</span><span class='line'><span class="l-Scalar-Plain">php</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">5.2</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">5.3</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">5.4</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">env</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">REPORT_EXIT_STATUS=1 NO_INTERACTION=1</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">before_script</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">sh travis/prepare.sh</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">script</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">sh travis/run-test.sh</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">notifications</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">email</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">reeze.xia@gmail.com</span>
</span></code></pre></td></tr></table></div></figure>


<p>配置简单明了，选择需要的语言，同时可以设置需要测试的语言版本，因为php-leveldb支持5.2 ~ 5.4,
所以这里设置了3个需要测试的版本。</p>

<p>env 设置为执行测试时需要设置的环境变量，因为php 执行<code>make test</code>测试时如果测试失败会提示
用户是否将测试结果发送给PHP官方。因为测试是自动进行的，如果不设置NO_INTERACTION=1会导致
测试失败后一直等待用户输入而hang住直到测试超时。</p>

<p>before_script 可以用来进行一些准备工作，例如php-leveldb扩展需要先安装leveldb才能编译。</p>

<p>travis/prepare.sh文件做的工作也就是从leveldb官方下载代码并编译，
最后编译扩展。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'>
</span><span class='line'>wget http://leveldb.googlecode.com/files/leveldb-1.5.0.tar.gz
</span><span class='line'>tar zxvf leveldb-1.5.0.tar.gz
</span><span class='line'><span class="nb">cd </span>leveldb-1.5.0 <span class="o">&amp;&amp;</span> make
</span><span class='line'><span class="nb">cd</span> ..
</span><span class='line'>phpize <span class="o">&amp;&amp;</span> ./configure --with-leveldb<span class="o">=</span><span class="nv">$PWD</span>/leveldb-1.5.0 <span class="o">&amp;&amp;</span> make
</span></code></pre></td></tr></table></div></figure>


<p>travis可以执行任何脚本。因为travis在执行测试之前会建立一个虚拟机用于测试。</p>

<p>script属性就是测试的入口，可以是任何的sh命令。测试结果到底是成功还是失败会依据这个命令的
返回值，如果返回非0结果，则表示测试失败，失败的时候就会给下面notifications设置的邮箱发送邮件。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'>
</span><span class='line'>make <span class="nb">test</span>
</span><span class='line'>
</span><span class='line'><span class="c"># make test didn&#39;t return status code correctly</span>
</span><span class='line'><span class="c"># use this to find whether the make test failed</span>
</span><span class='line'>cat tests/<span class="se">\*</span>.diff
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="nv">$?</span> -eq 0 <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">  </span><span class="nb">exit </span>1;
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>从上面的注释里也提到，因为PHP生成的<a href="https://bugs.php.net/bug.php?id=60285">测试不能正常的返回错误码</a>，这样的结果是即使测试失败了，
travis也会忽略，所以采用了一个折中的方式来测试。因为测试失败会生产diff文件，
报告测试失败的具体原因，cat的好处是能把错误详细信息报告出来，也能方便调试。</p>

<blockquote><p><strong>UPDATE</strong>
我已经提交了一个补丁用于让<code>make test</code>命令可以在测试失败的时候返回错误码了。
目前在master分支上，目前看在5.5版本以上可以使用。</p></blockquote>

<p>每次提交代码到Github上时，Travis将自动对新提交的版本进行测试。</p>

<p>除了PHP，其实你可以在Travis上测试绝大部分的软件，因为travis提供的是一个完整的环境，
而你可以编写任何的脚本来进行你的测试工作。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP中的NOP及为什么有这个opcode]]></title>
    <link href="http://reeze.cn/2012/05/28/what-opcode-zend-nop-is-in-php/"/>
    <updated>2012-05-28T14:19:00+08:00</updated>
    <id>http://reeze.cn/2012/05/28/what-opcode-zend-nop-is-in-php</id>
    <content type="html"><![CDATA[<h2>什么是NOP</h2>

<p>NOP 是一个特殊的opcode，表示空操作，在很多地方存在，汇编中的NOP含义也一样，
机器指令中的空操作通常用来将内存地址进行对齐，以提高CPU访问内存的效率，
GCC等编译器也会将特定的语句进行优化而产生空操作。</p>

<h2>PHP中的空操作opcode NOP: ZEND_NOP</h2>

<p>PHP基于Zend虚拟机，其他基于虚拟机的语言中大都会有类似NOP的指令，
PHP文档有对此的<a href="http://cn.php.net/manual/en/internals2.opcodes.nop.php">简单说明</a>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * no operation</span>
</span><span class='line'><span class="cm"> * opcode number: 0</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">function</span> <span class="nf">A</span><span class="p">(){};</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">/* VLD 的输出结果 */</span>
</span><span class='line'><span class="x">line  #   op  fetch   ext return  operands</span>
</span><span class='line'><span class="x">6 0   NOP              </span>
</span><span class='line'><span class="x">7 1   RETURN              1</span>
</span><span class='line'><span class="x">Function name: A</span>
</span><span class='line'>
</span><span class='line'><span class="x">Compiled variables: none</span>
</span><span class='line'>
</span><span class='line'><span class="x">line  #   op  fetch   ext return  operands</span>
</span><span class='line'><span class="x">6 0   RETURN              null</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的VLD结果可以看出，函数A()的声明编译后变成了<code>NOP</code>操作。</p>

<p>Zend虚拟机是高级抽象，不要考虑内存对齐等的问题，为什么还需要空操作这样的opcode呢？</p>

<p>原因简单讲就是：编译过程优化的结果。有的内容由于可以在编译时就可确定(称为提早绑定Early Binding)，
那么一部分opcode可以在编译时替换成空操作。</p>

<p>我们来看看这段代码的编译结果：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="k">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Foo</span> <span class="p">{}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">new</span> <span class="nx">Bar</span><span class="p">();</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Bar</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">filename</span><span class="o">:</span>       <span class="o">/</span><span class="nx">Users</span><span class="o">/</span><span class="nx">reeze</span><span class="o">/</span><span class="nx">Opensource</span><span class="o">/</span><span class="nx">php</span><span class="o">-</span><span class="nx">test</span><span class="o">/</span><span class="nx">php</span><span class="o">-</span><span class="nx">src</span><span class="o">-</span><span class="mf">5.4</span><span class="o">/</span><span class="nx">test</span><span class="o">.</span><span class="nx">php</span>
</span><span class='line'><span class="k">function</span> <span class="nf">name</span><span class="o">:</span>  <span class="p">(</span><span class="k">null</span><span class="p">)</span>
</span><span class='line'><span class="nx">number</span> <span class="nx">of</span> <span class="nx">ops</span><span class="o">:</span>  <span class="mi">8</span>
</span><span class='line'><span class="nx">compiled</span> <span class="nx">vars</span><span class="o">:</span>  <span class="nx">none</span>
</span><span class='line'><span class="nx">line</span>     <span class="c1"># *  op                           fetch          ext  return  operands</span>
</span><span class='line'><span class="o">---------------------------------------------------------------------------------</span>
</span><span class='line'>   <span class="mi">2</span>     <span class="mi">0</span>  <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="nx">JMPZ</span>                                                     <span class="k">true</span><span class="p">,</span> <span class="o">-&gt;</span><span class="mi">3</span>
</span><span class='line'>   <span class="mi">3</span>     <span class="mi">1</span>  <span class="o">&gt;</span>   <span class="nx">ZEND_DECLARE_CLASS</span>                               <span class="err">$</span><span class="mi">0</span>      <span class="s1">&#39;%00foo%2FUsers%2Freeze%2FOpensource%2Fphp-test%2Fphp-src-5.4%2Ftest.php0x106cd601f&#39;</span><span class="p">,</span> <span class="s1">&#39;foo&#39;</span>
</span><span class='line'>   <span class="mi">4</span>     <span class="mi">2</span>    <span class="o">&gt;</span> <span class="nx">JMP</span>                                                      <span class="o">-&gt;</span><span class="mi">3</span>
</span><span class='line'>   <span class="mi">6</span>     <span class="mi">3</span>  <span class="o">&gt;</span>   <span class="nx">ZEND_FETCH_CLASS</span>                              <span class="mi">4</span>  <span class="o">:</span><span class="mi">1</span>      <span class="s1">&#39;Bar&#39;</span>
</span><span class='line'>       <span class="mi">4</span>      <span class="k">NEW</span>                                                      <span class="o">:</span><span class="mi">1</span>
</span><span class='line'>       <span class="mi">5</span>      <span class="nx">DO_FCALL_BY_NAME</span>                              <span class="mi">0</span>
</span><span class='line'>   <span class="mi">7</span>     <span class="mi">6</span>      <span class="nx">NOP</span>
</span><span class='line'>   <span class="mi">9</span>     <span class="mi">7</span>    <span class="o">&gt;</span> <span class="k">RETURN</span>
</span></code></pre></td></tr></table></div></figure>


<p>和前面官方函数定义代码一样，上面VLD输出的第7行看到类Bar的opcode变成了NOP，不过请留意第3行，
这一行类Foo定义的opcode是ZEND_DECLARE_CLASS，也就是类的声明。</p>

<p><em>为什么同样是类的声明，第一个类声明的OPCODE和第二个的不一样呢？</em></p>

<p>上例中的代码，在Bar类声明之前是可以执行的<code>new Bar</code>，但是此时Bar类的声明并没有执行到，
那为什么可以访问到Bar类呢，<em>这是因为Bar类的声明在编译时就已经完成了</em>，
因为Bar类已经在编译时声明好了，所以在真正执行的时候就不需要再次执行声明类的操作了，
所以它所对应的opcode被替换成NOP了。</p>

<p>而Foo这个类由于处在条件判断块之中，编译期无法确定Foo类是否一定会被执行，所以还是需要在
执行时来声明这个类，所以opcode没有改变。</p>

<p>对于使用了opcode缓存的代码来说，把函数和类的声明移到了编译时，也就减少了执行时的opcode执行，
这能加快代码的执行。</p>

<h2>优化</h2>

<p>你可能会想，既然类及函数的声明可以优化掉，为什么不能直接丢弃这个opcode呢？
一能减少opcode占用的内容，比如很多的框架中有大量的类定义，也能减少执行时间，
因为空操作并不是0成本的，执行NOP的时候还是需要消耗CPU的。</p>

<p>先看看opcode编译过程的一个重要函数：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">zend_op</span> <span class="o">*</span><span class="nf">get_next_op</span><span class="p">(</span><span class="n">zend_op_array</span> <span class="o">*</span><span class="n">op_array</span> <span class="n">TSRMLS_DC</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">zend_uint</span> <span class="n">next_op_num</span> <span class="o">=</span> <span class="n">op_array</span><span class="o">-&gt;</span><span class="n">last</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>  <span class="n">zend_op</span> <span class="o">*</span><span class="n">next_op</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">next_op_num</span> <span class="o">&gt;=</span> <span class="n">CG</span><span class="p">(</span><span class="n">context</span><span class="p">).</span><span class="n">opcodes_size</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">op_array</span><span class="o">-&gt;</span><span class="n">fn_flags</span> <span class="o">&amp;</span> <span class="n">ZEND_ACC_INTERACTIVE</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="cm">/* we messed up */</span>
</span><span class='line'>          <span class="n">zend_printf</span><span class="p">(</span><span class="s">&quot;Ran out of opcode space!</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>                      <span class="s">&quot;You should probably consider writing this huge script into a file!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="n">zend_bailout</span><span class="p">();</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">CG</span><span class="p">(</span><span class="n">context</span><span class="p">).</span><span class="n">opcodes_size</span> <span class="o">*=</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'>      <span class="n">op_array_alloc_ops</span><span class="p">(</span><span class="n">op_array</span><span class="p">,</span> <span class="n">CG</span><span class="p">(</span><span class="n">context</span><span class="p">).</span><span class="n">opcodes_size</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">next_op</span> <span class="o">=</span> <span class="o">&amp;</span><span class="p">(</span><span class="n">op_array</span><span class="o">-&gt;</span><span class="n">opcodes</span><span class="p">[</span><span class="n">next_op_num</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">init_op</span><span class="p">(</span><span class="n">next_op</span> <span class="n">TSRMLS_CC</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">next_op</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个函数每次会返回一个zend_op(也就是opcode一个最小单位)，opcode的存储空间申请和哈希表类似，
通过预先申请空间的方式，如果空间不足则适当扩容。在编译时，opcode是以文件为单位的，而通常
在一个文件中函数或类声明的个数是不会太多的。而在编译时opcode数组已经是预先申请好的，所以
及时优化掉这个opcode，而实际在编译时的内存占用也不会有任何的优化。</p>

<p>目前只有少数几处使用了ZEND_NOP这个opcode。读者可以参考Zend/zend_compile.c: zend_do_early_binding()，
这个函数进行就是在确定在编译时能确定的函数以及类声明，在完成函数或类的声明后将当前编译的opcode设置为ZEND_NOP。
因为后续在执行是并需要再次对该函数或类进行声明了。</p>

<blockquote><p><strong>NOTE</strong>
当然也并不是所有的全局类或者方法都会进行提早绑定,具体可以参考前面提到的Zend_compile.c文件的实现</p></blockquote>

<p>在这个函数中其实可以将生成的ZEND_NOP优化掉的，比如eAccelarator扩展中就对opcode进行了优化，将ZEND_NOP从
opcode_array数组中移除了，因为使用了opcode cache扩展优化只进行一次，而执行对多次执行，
这样的优化是值得的。目前Zend引擎并没有进行任何的优化，首先从代码上来看，类和函数声明的数量和其他指令的数量
之间差很多个等级，所以至少这个地方优化的收益是有限的，为了保证Zend引擎的简洁它没有进行优化。</p>

<p>目前APC扩展已经基本确定为将要进入PHP默认opcode缓存的官方扩展了，那么这些优化都可以在扩展中进行，
保证Zend引擎的简单易维护更为重要。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[迁移博客到Octopress]]></title>
    <link href="http://reeze.cn/2012/05/19/migrate-to-octopress/"/>
    <updated>2012-05-19T23:50:00+08:00</updated>
    <id>http://reeze.cn/2012/05/19/migrate-to-octopress</id>
    <content type="html"><![CDATA[<p>很久以前就不想继续使用Wordpress了，不太习惯在线写东西，开始返璞归真，比较喜欢
纯文本的内容创作方式，<a href="http://www.php-internal.com">TIPI</a>就使用的是markdown格式，
同时在终端也会让我更有写作的欲望。</p>

<p>翻了一下以前的博客，原来一共加起来也不足20篇。以此作为起点今后多继续更新博客吧。</p>

<p>TIPI的issue里还有很多的待处理工作，计划在7月份全部写完。这个始终是高优先级的。
最近给PHP修复了一些bug，也有一些feature被接受了。在这过程中对PHP的实现又有了一些更加深入
的理解。也有冲动想要写到TIPI里。总之，TIPI会一直更新。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[复制SSH会话,避免多次密码输入]]></title>
    <link href="http://reeze.cn/2011/03/22/duplicate-ssh-session/"/>
    <updated>2011-03-22T18:49:27+08:00</updated>
    <id>http://reeze.cn/2011/03/22/duplicate-ssh-session</id>
    <content type="html"><![CDATA[<p>就当是笔记吧. 首先，这不是配置ssh密钥简历信任关系免密码登陆的方法。
主要解决的问题是在终端下多次登陆统一主机需要多次输入用户密码的问题。</p>

<p>我们公司的内网环境比较特殊,　为了安全性做了各种认证,　联入网络需要准入一下,　
准入需要使用密码+随即密码的方式认证,　是挺安全的,　可以对于我们来说其实很痛苦,
每次都要输入一下密码,因为包含了随机密码, 这就无法使用脚本来方便的自动准入.　
我们连入公司的远程开发机需要通过一台特殊的服务器来将我们的登陆转发,　
也就是登陆到中转机,然后通过中转机在ssh.同样登陆中转机也是需要这个随机密码的.　吐槽完毕.</p>

<p>工作中经常需要在多台服务之间ssh登陆,　screen 是一个不错的选择,　
不过有时候还是需要打开另一个窗口再次登陆,　这时我又得再次输入那个随机密码,　
如果你使用windows并且使用SecureCRT那你可以不用继续往下看了,
SecureCRT可以简单的复制回话, 这个功能很贴心. 如果使用Linux&amp;Mac OS那就继续往下看.</p>

<p>在/etc/ssh_config 文件中加入</p>

<pre><code>Host *
ControlMaster auto
ControlPath ~/.ssh/master-%r@%h:%p
</code></pre>

<p>下次登陆同一站点的时候就会自动复用已有的回话. 可以只输入一次密码开N个窗口了.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TIPI项目正式发布&恭喜er童鞋大婚]]></title>
    <link href="http://reeze.cn/2011/03/20/tipi-first-release-and-ers-marriage/"/>
    <updated>2011-03-20T23:45:12+08:00</updated>
    <id>http://reeze.cn/2011/03/20/tipi-first-release-and-ers-marriage</id>
    <content type="html"><![CDATA[<p>首先恭喜一下er童鞋的大婚吧.</p>

<p>接着er大婚的喜气,项目决定在今天发布我们的TIPI项目,项目从成立到现在,一直有条不紊的前进. 现在项目也进行的差不多,可以公开给大家了.   项目的第一个tag,其实是在20分钟前才提交完.终于能如期发布.
下面是我们的发布公告.  欢迎围观:)</p>

<hr />

<p>我们的朋友，TIPI团队成员，博客哥，er<a href="http://www.zhangabc.com/">http://www.zhangabc.com</a>同学在今天这个春光灿烂，春暖花开，春心荡漾，春情澎湃的大好日子里，兴高采烈的走入了婚姻的殿堂。 在这样一个让人激动不已，激情四射的日子，TIPI团队决定发布<a href="http://www.php-internal.com/">深入理解PHP内核项目</a>的第一阶段成果。</p>

<p>大概在半年前，我们在网上相聚，莫名的邂逅，有了我们这样的一个团队。我们有激情，有想法，有行动，也有了我们这个项目。 开始的艰难，没有时间的痛苦，坚持，从而有了今天的发布。一路走来，有辛苦，也有收获，至少记录了我们的青春，至少做了我们想做的！</p>

<p><a href="http://www.php-internal.com/">深入理解PHP内核（TIPI）项目</a>是一个开源的，分析PHP内核的系列文章项目。整个项目是基于PHP5.3版本的源码。 它包括PHP语言中我们常用的变量，函数，类，对象等的实现原理，也包括PHP的虚拟机，内存管理机制，线程安全，错误异常，文件流和PHP5.3新增加的垃圾收集机制，命名空间等。 除了PHP语言本身的特性外，还包括PHP扩展的相关信息。我们希望这个项目可以帮助更多的PHPer可以更加了解PHP语言本身，知其然知其所以然！</p>

<p>第一阶段，我们发布了前四章，从环境的搭建，源码的阅读方式到对于PHP源码的整体把握，再到对于变量和函数的详细解说。随着项目的进展，我们本身对于PHP内核的理解也加深了许多。 后续我们将以章为单位发布后续的章节。现在第5章正在撰写&#8230;</p>

<p><a href="http://www.php-internal.com/">在线阅读入口>>></a></p>

<h2>TIPI团队序</h2>

<p>博客哥三者，今聚首于网络一偶，共谋TIPI大计，与诸君共享技术之事： 向来穷PHP内核之事者或多，却鲜有分享之举。哥三者，常流连于中外博客也，若得一佳作，即欣喜若狂，本乐分享，及有学习总结之心，欲为PHP内核之事穷全身之力。</p>

<ul>
<li><p><a href="http://reeze.cn/">reeze</a>，博客哥者，好苹果，好开源, 陶醉于Web开发及架构, 为Ruby之美所折服, 甚爱iOS及其开发, 好一切善美之事物.</p></li>
<li><p><a href="http://www.zhangabc.com/">er</a>，博客哥者，稀饭Linux, Web, 2.0, Ajax, C, PHP, Javascript, CSS等。乃一以代码为乐之码农也。</p></li>
<li><p><a href="http://www.phppan.com/">phppan</a>，博客哥者，好书，好PHP，亲于PHP，C，Ajax，程序架构等</p></li>
</ul>


<p>是以三人之力行分享之事，转GIT，习markdown，论项目之计于深夜，何怕事之不成？务使PHP内核之事向众人知。 为此特示。</p>

<h2>项目大事记</h2>

<ul>
<li><p>2010/12/28 14:47 pan向reeze提议写一个PHP内核系列文章,一拍即合.</p></li>
<li><p>2010/12/28 15:10 er同学加入.组织正式形成.</p></li>
<li><p>2010/12/30 11:11 pan发出&lt;&lt;深入理解PHP内核>>第一份完整目录草稿.</p></li>
<li><p>2010/12/31 21:14 举行第一次三方会谈,结合pan和reeze的目录草稿确定了正式目录. 标志着TIPI团队项目的正式确立.. (鼓掌).</p></li>
<li><p>2011/01/01 05:08 reeze向github版本库提交了完整的项目, TIPI项目开始进入实施阶段</p></li>
<li><p>2011/01/06 15:22 经过哥三激烈的讨论后做出艰难的决定,我们的项目域名正式确定为php-internal.com.(撒花无数).</p></li>
<li><p>2011/02/14 23:32 在这个几人欢喜几人愁，充满花香的日子里, 哥三在深夜确定了TIPI项目的第一次整体发布流程，并且定稿了前三章的大纲以及确定了发布前的调整工作。</p></li>
<li><p>2011/02/25 02:53 虽然我们还没有正式开始推广TIPI, 但已经有人开始关注TIPI了.　恭喜icodeu<a href="http://blog.icodeu.com/">http://blog.icodeu.com</a>同学成为我们第一位留下脚印的同学(看留言时间,也是个夜猫子啊.)</p></li>
<li><p>2011/03/10 11:22 经过TIPI团队的慎重考虑, TIPI团队新增一员大将:honestqiao同学, 欢迎他的加入!</p></li>
<li><p>2011/03/20 20:00 今天是TIPI团队成员er同学的大婚之日，团队决定在这个喜庆的日子将我们第一阶段的成果对外发布。让我们恭喜这对新人和我们的TIPI团队。</p></li>
</ul>


<h2>特别鸣谢</h2>

<p>我们需要感谢我们家里的领导，没有有她们的支持，也就没有我们今天的发布，感谢她们的包容，感谢她们的照顾，感谢她们的理解和支持。谢谢！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[PHP-Internal]定制PHP语法获取PHP变量的变量名]]></title>
    <link href="http://reeze.cn/2010/12/26/how-to-get-a-php-variables-name-a-custom-php-syntax-implementation/"/>
    <updated>2010-12-26T17:56:53+08:00</updated>
    <id>http://reeze.cn/2010/12/26/how-to-get-a-php-variables-name-a-custom-php-syntax-implementation</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Plugin]豆瓣秀 For WordPress]]></title>
    <link href="http://reeze.cn/2010/11/28/doubanshow-for-wordpress/"/>
    <updated>2010-11-28T22:10:23+08:00</updated>
    <id>http://reeze.cn/2010/11/28/doubanshow-for-wordpress</id>
    <content type="html"><![CDATA[<p>我喜欢在博客中显示我在豆瓣上的一些信息，比如想看哪些书哪些电影神马的。刚开始用的是 Robin的 <a href="http://www.robb.com.cn/plugins">http://www.robb.com.cn/plugins/</a> 的 WP-DoubanShow插件，他用的是豆瓣API。这个插件需要手动修改主题模板文件。刚开始用的挺好，修改就修改吧。不过后来换过几次主题后发现每次修改模板文件还挺“脏”的。遂问robin能否修改成widget的方式，他说官方推出了一个豆瓣秀功能<a href="http://www.douban.com/service/badgemaker">http://www.douban.com/service/badgemaker</a>， 所以不继续维护了。看过官方的说明。发现要在Wordpress中用也只能手动修改模板，不过官方提供了一个生成js的设置项，可以根据需要生成相应的脚本，选项也还算简单。 在网上搜了一番，没有给wordpress用的插件，所以自己写了一个，设置项和官方的一样。下面简单的说明一下：</p>

<ol>
<li><p>第一步：下载插件文件： <a href="http://reeze.cn/uploads/2010/11/DoubanShow.zip">DoubanShow.zip</a>, 或者在管理界面中添加插件, 搜索douban即可看到&#8221;豆瓣秀For Wordpress&#8221; 选择安装, 如果这样的话,下面的上传步骤就不需要了</p></li>
<li><p>第二步：上传安装。 后台管理的  插件 -> 添加插件 -> 上传中上传下载的文件。<a href="http://reeze.cn/uploads/2010/11/upload.png"><img src="http://reeze.cn/uploads/2010/11/upload.png" alt="" /></a></p></li>
</ol>


<p><a href="http://reeze.cn/uploads/2010/11/active.png"><img src="http://reeze.cn/uploads/2010/11/active2.png" alt="" /></a>
上传完后记得“启用插件&#8221;</p>

<ol>
<li></li>
</ol>


<p>第三步：在后台管理的 外观 -> 小工具 中选择”豆瓣秀“ 拖到右侧你想放置的位置。 然后点击拖过去的豆瓣秀箭头。出现如下设置：</p>

<p><a href="http://reeze.cn/uploads/2010/11/settings.png"><img src="http://reeze.cn/uploads/2010/11/settings.png" alt="" /></a></p>

<p>标题默认为空，就是不显示标题。也可以设置成你想要的标题。然后要设置好你的豆瓣ID，记住不是豆瓣的登录用户名。 设置好以后。去你的页面看看效果吧，也可以看我博客页面右下角。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP Puzzle(一): 有趣的变量作用域-PHP中global和Javascript中的var关键字]]></title>
    <link href="http://reeze.cn/2010/11/14/php-puzzle-1-the-variables-scope-in-php-and-javascript/"/>
    <updated>2010-11-14T15:38:32+08:00</updated>
    <id>http://reeze.cn/2010/11/14/php-puzzle-1-the-variables-scope-in-php-and-javascript</id>
    <content type="html"><![CDATA[<p>昨天在网上看到几道有意思的PHP题, 下面这道题让我想起了对应的Javascript版本.
`</p>

<p>这段代码运行结果是什么呢? 别急着执行这段代码,先想想你的结果.然后再对比一下吧.</p>

<p>我们看先看看global的定义 http://www.php.net/manual/en/language.variables.scope.php 这里也没有太为规范的解释.只是说可以通过global关键字来访问全局变量. 这里还涉及到一个类型转换的问题.</p>

<p>大家都知道PHP脚本是编译为opcode逐语句执行的. 那么现在要一句语句解释就很容易了.
`</p>

<p>这里可能比较困惑的的是现在变量$a到底是局部变量还是全局变量了.因为global在定义局部变量之后.所以$a变为了全局变量,而在最后输出结果的时候$a并没有值.所以最后在相乘的时候是 NULL * 100; 也就是0了;可能会有人有疑问, 后面只是把$a变为了全局变量, 他的值应该不变的啊. 让我通过下面的例子来看把:
`</p>

<p>  int(0)
  [&#8220;a&#8221;]=>
  &NULL;
}
<code>
变量a是NULL的一个引用,因为全局作用域内没有a这个变量. 所以即使在函数前面定义了一个a变量,但是它的值已经指向了全局作用域了.
实际上 global关键字首先从全局符号表中查找变量名叫做a的变量,并把这个变量值设置为当前作用域的符号表中的a变量(更新了当前变量的值). 如果全局作用域内没有这个变量则会在全局作用域内增加这个变量, 实现代码见: $PHP_SRC/Zend/zend_vm_execute.h
</code>
static int ZEND_FASTCALL zend_fetch_var_address_helper_SPEC_CONST(int type, ZEND_OPCODE_HANDLER_ARGS) {</p>

<pre><code>    // ...
    if (zend_hash_find(target_symbol_table, varname-&gt;value.str.val, varname-&gt;value.str.len+1, (void **) &amp;retval;) == FAILURE) {
        switch (type) {
            case BP_VAR_R:
            case BP_VAR_UNSET:
                zend_error(E_NOTICE,"Undefined variable: %s", Z_STRVAL_P(varname));
                /* break missing intentionally */
            case BP_VAR_IS:
                retval = &amp;EG;(uninitialized_zval_ptr);
                break;
            case BP_VAR_RW:
                zend_error(E_NOTICE,"Undefined variable: %s", Z_STRVAL_P(varname));
                /* break missing intentionally */
            case BP_VAR_W: {
                    zval *new_zval = &amp;EG;(uninitialized_zval);

                    Z_ADDREF_P(new_zval);
                    zend_hash_update(target_symbol_table, varname-&gt;value.str.val, varname-&gt;value.str.len+1, &amp;new;_zval, sizeof(zval *), (void **) &amp;retval;);
                }
                break;
            EMPTY_SWITCH_DEFAULT_CASE()
        }
    }

 //...
</code></pre>

<p>}
<code>
看了这个解释大家可能觉得理所当然.一句一句执行的嘛. 看完了PHP中全局作用域的例子,咱们再看看类似的Javascript中的局部变量的版本吧
</code>
var a = 1;
function multiply(b)
{</p>

<pre><code> a = 100;
 var a;

 return a * b;
</code></pre>

<p>}
alert(a);
alert(multiply(100));
`
那这段代码的输出将会是多少呢?
如果还是同样的思路,结果可能是你的期望完全不一样的结果. <strong>这里的var定义变量和php中global不是一样的东西, php中的global是会在运行时执行的.而Javascript中的var在运行之前就已经&#8221;处理&#8221;好了</strong>.在运行之前的&#8221;语法分析&#8221;(没有看过Javascript引擎的实现.姑且这么分把)过程中,multiply函数中出现了var a;则把变量a加到函数体内的&#8221;局部变量表&#8221;中了.在运行过程中并不会执行var a;这一句.  这也是Javascript&#8221;怪异&#8221;的地方.定义变量的位置并没有关系.所以在函数内定义局部变量最好放在函数体的前面.</p>

<p>所以第一个alert输出的1, 函数的执行并没有改版全局范围内的a变量; 第二就没有什么问题了, 是10000;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[怎样获取PHP变量的变量名之PHP实现]]></title>
    <link href="http://reeze.cn/2010/11/04/php-get-variables-name-a-php-impliment/"/>
    <updated>2010-11-04T11:07:37+08:00</updated>
    <id>http://reeze.cn/2010/11/04/php-get-variables-name-a-php-impliment</id>
    <content type="html"><![CDATA[<p><a href="http://reeze.cn/2010/10/30/php-internal-how-to-get-variables-name-an-extension-implement/">上一篇文章</a>里提到是用PHP扩展实现获取变量的变量名的方法. 今天发现有一个PHP实现的版本 . 实现方法来自:http://mach13.com/how-to-get-a-variable-name-as-a-string-in-php</p>

<p><strong>刚开始以为这个方法好使, 仔细想想其实也是有问题的.</strong>
<del>
这个解决方法是用的PHP里的get_defined_vars()方法,该方法返回当前作用域内的所有变量信息.也是和$GLOBALS一样,以变量名 => 值的方式返回.
他的代码很简单:</p>

<p>`
$v)</p>

<pre><code>    $aDefinedVars_0[$k] = $v;

$iVarSave = $iVar;
$iVar     =!$iVar;   // 将当前变量的值取反

$aDiffKeys = array_keys (array_diff_assoc ($aDefinedVars_0, $aDefinedVars));  // 对比取反前后的变量
$iVar      = $iVarSave; // 恢复当前变量的值

return $aDiffKeys[0];
}
</code></pre>

<p>?></p>

<p>`</p>

<p>它通过引用的方式改变当前变量的值, 然后通过对比前后两个数组的差异来获取值被改变了的变量.然后返回其名字.经过测试这的确是一个方法.相对我实现的方法. 它提供的方法移植性较好, 不需要赖以扩展. 而这个php版本的实现, 必须传递一个get_defined_vars()的参数, 我实现的那个扩展,则不需要. 对于类似 var_name($a=10,get_defined_vars()); 的调用,该方法无法正常获得变量名.
</del></p>

<p>这个今天又仔细想了想,下面提供的方法是有问题的.. 他解决问题的方法是通过修改变量的值, 并对比前后所有的变量来找出值发生变化的变量. 而实际上.修改了其中一个变量另一个变量的值也会发生变化: 这就是引用, 如下
`</p>

<p>PS: 如果你真的需要这种方法. 请重新思考一下你的需要真的需要这样的方法么?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Php Internal How To Get Variables Name An Extension Implement]]></title>
    <link href="http://reeze.cn/2010/10/30/php-internal-how-to-get-variables-name-an-extension-implement/"/>
    <updated>2010-10-30T00:00:00+08:00</updated>
    <id>http://reeze.cn/2010/10/30/php-internal-how-to-get-variables-name-an-extension-implement</id>
    <content type="html"><![CDATA[<p>[?25l[J[J[J[J[J[J[?12l[?25h[?1049h[?1h=[1;37r[?12;25h[?12l[?25h[27m[m[H[2J[?25l[37;1H&#8221;2010-10-30-php-internal-how-to-get-variables-name-an-extension-implement.markdown&#8221; 301L, 12377C[1;1H&#8212;
date: &#8216;2010-10-30 00:39:01&#8217;
layout: post
slug: php-internal-how-to-get-variables-name-an-extension-implement
status: publish
title: &#8216;[PHP-Internal]鎬庝箞鏍疯幏鍙朠HP鍙橀噺鐨勫彉閲忓悕涔嬫墿灞曞疄鐜</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解决Mac下终端中使用screen管理回话但看不到滚动条等问题]]></title>
    <link href="http://reeze.cn/2010/07/02/resolve-mac-terminal-lost-scrollbar-in-screen-command/"/>
    <updated>2010-07-02T15:16:33+08:00</updated>
    <id>http://reeze.cn/2010/07/02/resolve-mac-terminal-lost-scrollbar-in-screen-command</id>
    <content type="html"><![CDATA[<p>工作中开发主要在公司的开发机上，ssh到远程服务器上用vim开发，有时候因为网络原因或者不小心把终端给
关了或者网络出现问题以后就痛苦了，因为会话关闭后开启的程序就挂了，vim默认会用swp文件保存修改，
但是为了安全起见，不想关掉swp，一不小心真丢数据就划不来了，非法关闭vim之后再次打开就会提示是否恢复文件，
自从发现screen这个绝佳的会话管理工具，就深深的爱上了它，IBM的这篇文章有详细的介绍
<a href="http://www.ibm.com/developerworks/cn/linux/l-cn-screen/">linux 技巧：使用screen 管理你的远程会话</a>”。
在使用过程中发现一些问题，screen默认使用Ctrl + A当做热键, 用惯了命令行的人肯定会用Ctrl +A ,
Ctrl + E来定位当前输入的命令吧. 其实在~/.screenrc中修改一下就可以了，下面是我的.screenrc:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vbell_msg "" # 比如在tab自动提示的时候，默认总是会出现一个Wuff,觉得很烦，关掉
</span><span class='line'>escape ``  # instead of Control-a  使用 反引号当快捷键，因为用的相对较少
</span><span class='line'>termcapinfo xterm* ti@:te@  # 这个就是解决mac下看不到滚动条的问题了</span></code></pre></td></tr></table></div></figure>


<p>解决方法来源见：<a href="http://stackoverflow.com/questions/1039442/mac-os-x-terminal-apps-buffer-and-screen-command">http://stackoverflow.com/questions/1039442/mac-os-x-terminal-apps-buffer-and-screen-command</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[让你的网站也像Gmail一样支持文件拖放上传-HTML5之File API]]></title>
    <link href="http://reeze.cn/2010/04/25/make-your-site-drop-uploadable-with-html5s-file-api-like-gmail-does/"/>
    <updated>2010-04-25T00:14:29+08:00</updated>
    <id>http://reeze.cn/2010/04/25/make-your-site-drop-uploadable-with-html5s-file-api-like-gmail-does</id>
    <content type="html"><![CDATA[<blockquote><p>如果你比较好奇，可以先从<a href="http://labs.reeze.cn/labs/HTML5/FileAPI/FileAPI_Test.zip">这里下载所有代码</a>，也可以点击这里<a href="http://labs.reeze.cn/labs/HTML5/FileAPI/chrome_drop_upload.html">查看chrome下上传的demo</a>，点这里<a href="http://labs.reeze.cn/labs/HTML5/FileAPI/firefox36_drop_upload.html">查看firefox下的demo</a></p></blockquote>

<p>前不久<a href="http://net.chinabyte.com/395/11221395.shtml">Gmail推出了支持拖拽的附件上传功能</a>，试用了下还真不错，其实很久以前就在想能有直接拖拽附件的功能，多亏有了HTML5，Web应用越来越像客户端的应用了。</p>

<p>在好奇心驱使下，想了解一下Gmail到底是怎么做到的，了解了一下最新的<a href="http://www.w3.org/TR/FileAPI">HTML5 File API草案</a>，这个接口主要提供的就是提供对文件对象的访问，别想歪了，这个接口是无法随意的访问系统里的文件的。他能做的就是访问<input type="file" />标签里所选择的文件，这些文件可以通过用户手动选择，或者是HTML5的拖放接口选中的文件。有兴趣的童鞋可以看看这个规范，还算比较简单。</p>

<p>下面简单看看接口定义几个对象。</p>

<p>FileList、File对象。</p>

<p>在HTML5中的<input type="file"  />标签中增加了mutilple属性，允许进行多文件选择。大家应该都知道一般上传标签中是不允许选择多个文件的。 新增的这个属性就是允许进行多个文件的选择（这个在桌面应用中也很常见）。<input type="file" **multiple="multiple"** id="file" /></p>

<p>下面是在Firebug中的输出
`</p>

<blockquote><blockquote><blockquote><p>var f = document.getElementById(&#8220;file&#8221;)
f.files
FileList0=File length=1 // 选中的文件数量
f.files[0]
FilefileName=es.dll fileSize=271360
`</p></blockquote></blockquote></blockquote>

<p>FileList对象就是用户选择的所有文件的对象表示，如果是通过input标签选择的，就可以通过上面代码所示的方法进行访问，File对象就可以刚才选择的某个文件的信息，如上面的代码所示，主要可以得到所选中的文件名以及文件大小信息。</p>

<p>你可能在想只能得到这些信息到底有什么用呢？都没有办法读取文件内容，这就得提到规范中的FileReader接口了，这个接口就是用来读取File对象文件的。</p>

<p>在<a href="http://www.w3.org/TR/FileAPI">File API规范</a>中提到File API主要是和其他的接口协同合作。比如XMLHttpRequest (这个新接口支持通过xhr的send()方法发送File对象)， DataTransfer(也就是HTML5中的拖拽接口 )， 以及<a href="http://dev.w3.org/html5/workers">Web Worksers</a>(这个主要是异步脚本执行，相当于给JS提供了“多线程”脚本执行能力，并且支持通过postMessage()进行“线程间通信”)，感兴趣的，可以看看<a href="http://www.v-ec.com/dh20156/article.asp?id=242">这篇日志</a>，以及<a href="http://feedproxy.google.com/~r/webbang/~3/_usD4yheDqI">这篇</a>。</p>

<p>目前能实现这样的效果的方式主要有如下几种：</p>

<ul>
<li><p>Gmail中提到的这两个浏览器都支持拖放接口，托放以后可以直接通过托放事件的DataTransfer属性访问到本次托放是关联的文件对象列表FileList,然后通过XMLHttpRequest的send方法将File对象发送到服务器</p></li>
<li><p>在Chrome下支持直接将文件拖放到文件选择控件上，就相当于直接选择了文件。这时可以通过<input type="file" />DOM对象的files属性访问到被托放进来的文件列表对象，然后也可以通过Ajax将文件对象发送到服务器，通过将文件选择控件透明度降低也可以实现Gmail类似的效果。 在Chrome因为可以直接通过托拽的方式让文件选择控件“赋值”，此时也可以通过一个iframe加表单的方式将数据发送到服务器。</p></li>
<li><p>在Firefox3.6下可以通过FileReader直接读取到文件的内容，然后直接将文件内容发送到服务器端(可以参考<a href="http://labs.reeze.cn/labs/HTML5/FileAPI/index.html">这个例子</a>，这是个不完整的例子，直接浏览是看不到效果的，查看源代码你就会懂的。）</p></li>
</ul>


<p>下面就来看看Gmail到底是怎么做到的吧。</p>

<p>本来想通过Firebug的概况功能来捕捉到在托拽期间的脚本执行情况，比如：</p>

<p><a href="http://reeze.cn/uploads/2010/04/screenshot1.png"><img src="http://reeze.cn/uploads/2010/04/screenshot1.png" alt="" /></a><a href="http://reeze.cn/uploads/2010/04/screenshot.png">
</a></p>

<p>但是脚本执行里压根没有找到ajax相关的函数调用，可能是因为firebug还不支持监控页面里嵌入的iframe中的脚本执行跟踪，这也说明本次上传肯定是在某个iframe中完成的。，那就直接监听网络吧，托拽上传一个附件时查看网络情况，发现附件是通过下面的ajax post过去的：</p>

<p><a href="http://reeze.cn/uploads/2010/04/Compose-Mail-reeze.xia@gmail.com-Gmail1.jpg"><img src="http://reeze.cn/uploads/2010/04/Compose-Mail-reeze.xia@gmail.com-Gmail1.jpg" alt="" /></a></p>

<p>大家注意看，是通过ajax post方式将附件POST到服务器的，</p>

<p><a href="http://reeze.cn/uploads/2010/04/Gmail-11.jpg"><img src="http://reeze.cn/uploads/2010/04/Gmail-11.jpg" alt="" /></a></p>

<p><a href="http://reeze.cn/uploads/2010/04/Compose-Mail-reeze.xia@gmail.com-Gmail-31.jpg"><img src="http://reeze.cn/uploads/2010/04/Compose-Mail-reeze.xia@gmail.com-Gmail-31.jpg" alt="" /></a><a href="http://reeze.cn/uploads/2010/04/Compose-Mail-reeze.xia@gmail.com-Gmail-3.jpg">
</a></p>

<p>可以看出Gmail在firefox下不是通过表单直接提交实现的。在chrome下的开发人员工具有点简单，无法看到网络情况，我也懒的再去抓包看了，估计是使用透明<input type="file" />+ajax方式实现的。</p>

<p>在Gmail支持托拽的声明中提到目前只支持Chrome 2+以及FireFox3.6+。虽然这两个浏览器都支持HTML5，但是对于所有规范的支持程度都是不一样的，并且规范也还不是正式规范。在Firefox3.6的release note中提到：</p>

<p>Support for new DOM and HTML5 specifications including the Drag &amp; Drop API and the File API, which allow for more interactive web pages.</p>

<p>开始支持了HTML5的拖拽接口以及File API。</p>

<hr />

<p>下面根据浏览器以及HTML5的规范整理出两个浏览器下实现类似Gmail 上传附件的代码。</p>

<p><a href="http://reeze.cn/uploads/2010/04/14.jpg"><img src="http://reeze.cn/uploads/2010/04/14.jpg" alt="" /></a></p>

<p>点击<a href="http://labs.reeze.cn/labs/HTML5/FileAPI/FileAPI_Test.zip">这里下载所有代码</a>，有兴趣的童鞋查看源代码就知道怎么回事了，有一定的注释：）</p>

<p>也可以点击这里<a href="http://labs.reeze.cn/labs/HTML5/FileAPI/chrome_drop_upload.html">查看chrome下上传的demo</a>，点这里<a href="http://labs.reeze.cn/labs/HTML5/FileAPI/firefox36_drop_upload.html">查看firefox下的demo</a>，之所以分开是为了简单起见，当然你真的想要给你的网站提供托拽上传功能，你就得自己去同时兼容这两个浏览器啦，相信这也不是件困难的事情：）</p>
]]></content>
  </entry>
  
</feed>
