<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Reflection | Zen Space]]></title>
  <link href="http://reeze.cn/categories/reflection/atom.xml" rel="self"/>
  <link href="http://reeze.cn/"/>
  <updated>2014-08-30T09:25:09+08:00</updated>
  <id>http://reeze.cn/</id>
  <author>
    <name><![CDATA[reeze]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[怎么样获取PHP函数默认参数的常量名]]></title>
    <link href="http://reeze.cn/2012/07/22/how-to-get-php-functions-const-parameters-name/"/>
    <updated>2012-07-22T20:40:00+08:00</updated>
    <id>http://reeze.cn/2012/07/22/how-to-get-php-functions-const-parameters-name</id>
    <content type="html"><![CDATA[<p>好久没有更新了，发篇占位文：如果某个函数的默认参数是个常量，那么怎么样获取这个参数的常量名称？见代码：</p>

<pre><code class="php">&lt;?php

function new_blog($title = DEFAULT_TITLE) {
    // blahblah
}
</code></pre>

<p>在上面的代码中，怎么样获取函数new_blog函数的参数$title所对应的默认值常量名： <code>DEFAULT_TITLE</code>。这个问题和以前我曾写过的一篇
关于<a href="http://reeze.cn/2010/12/26/how-to-get-a-php-variables-name-a-custom-php-syntax-implementation/">如何获取变量名称</a>的博文相似。</p>

<p>这个问题，在PHP5.4.6之前基本上没有解决方法了，因为函数定义是编译时的信息，在PHP运行时是获取不到的。
当然这里说的无法实现是指的使用官方PHP版本时没法搞定。</p>

<p>在PHP中类似的需求，一般都可以使用PHP的反射扩展。</p>

<h3>PHP的反射(Reflection)</h3>

<p>反射是PHP5中提供的用于获取或操作PHP内部信息的标准扩展，可能写应用代码的用户使用的较少一些，
编写框架或者平台性的系统会使用到。</p>

<p>比如你的框架需要实现一种插件机制，而你可能需要利用反射来获取类或者函数的元信息。
这里就不对Reflection的使用做过多的介绍了，详细信息见官方文档： <a href="http://cn.php.net/manual/en/book.reflection.php">http://cn.php.net/manual/en/book.reflection.php</a></p>

<h3>新的函数ReflectionParameter::getDefaultValueConstantName()</h3>

<p>不过在PHP5.4.6之前，Reflection是没有实现该功能的。这个需求其实来自PHPUnit的作者<a href="https://github.com/sebastianbergmann">Sebastian Bergmann</a>。
因为这个需求在Reflection模块来说是一个缺失，不属于大功能的升级，所以直接进入了目前的最新分支PHP-5.4。
同时这个功能在PHP-5.4.6中可用了。<a href="https://github.com/php/php-src/blob/PHP-5.4.6/NEWS#L41">https://github.com/php/php-src/blob/PHP-5.4.6/NEWS#L41</a></p>

<p>实现代码见：<a href="https://github.com/php/php-src/commit/13a9555342a4156a6150818234639b49a596ccd6">https://github.com/php/php-src/commit/13a9555342a4156a6150818234639b49a596ccd6</a>,
这个方法目前没有使用说明，不过看名字应该也能明白。不过可以参考<a href="https://github.com/php/php-src/commit/13a9555342a4156a6150818234639b49a596ccd6#diff-1">测试用例</a>。</p>

<p>这个提交给ReflectionParameter类增加了两个函数：</p>

<ol>
<li>ReflectionParameter::isDefaultValueConstant() 用于判断函数的这个参数是否是常量默认参数</li>
<li>ReflectionParameter::getDefaultValueConstantName() 用于获取这个常量默认参数的参数名称</li>
</ol>


<pre><code class="php">&lt;?php
define("CONST_TEST_1", "const1");

function ReflectionParameterTest($test1=array(), $test2 = CONST_TEST_1) {
    echo $test;
}
$reflect = new ReflectionFunction('ReflectionParameterTest');
foreach($reflect-&gt;getParameters() as $param) {
    if($param-&gt;getName() == 'test1') {
        var_dump($param-&gt;isDefaultValueConstant());
    }
    if($param-&gt;getName() == 'test2') {
        var_dump($param-&gt;isDefaultValueConstant());
    }
    if($param-&gt;isDefaultValueAvailable() &amp;&amp; $param-&gt;isDefaultValueConstant()) {
        var_dump($param-&gt;getDefaultValueConstantName());
    }
}

class Foo2 {
    const bar = 'Foo2::bar';
}

class Foo {
    const bar = 'Foo::bar';

    public function baz($param1 = self::bar, $param2=Foo2::bar, $param3=CONST_TEST_1) {
    }
}

$method = new ReflectionMethod('Foo', 'baz');
$params = $method-&gt;getParameters();

foreach ($params as $param) {
    if ($param-&gt;isDefaultValueConstant()) {
        var_dump($param-&gt;getDefaultValueConstantName());
    }
}
?&gt;
// 运行结果
bool(false)
bool(true)
string(12) "CONST_TEST_1"
string(9) "self::bar"
string(9) "Foo2::bar"
string(12) "CONST_TEST_1"
</code></pre>
]]></content>
  </entry>
  
</feed>
